From e33186237a7c12b8b63aedfb1296f537982987fa Mon Sep 17 00:00:00 2001
From: 0x277F <0x277F@gmail.com>
Date: Thu, 2 Jun 2016 19:57:10 -0600
Subject: [PATCH] Fix Compile Errors Tenball


diff --git a/net/minecraft/block/BlockDynamicLiquid.java b/net/minecraft/block/BlockDynamicLiquid.java
index 3086e68..c7c7b2e 100644
--- a/net/minecraft/block/BlockDynamicLiquid.java
+++ b/net/minecraft/block/BlockDynamicLiquid.java
@@ -109,7 +109,7 @@ public class BlockDynamicLiquid extends BlockLiquid {
         this.tryFlowInto(var1, var2.down(), var14, var5 + 8);
       }
     } else if (var5 >= 0 && (var5 == 0 || this.isBlocked(var1, var2.down(), var14))) {
-      Set var16 = this.getPossibleFlowDirections(var1, var2);
+      Set<EnumFacing> var16 = this.getPossibleFlowDirections(var1, var2); // BCMP
       int var18 = var5 + var6;
       if (var5 >= 8) {
         var18 = 1;
diff --git a/net/minecraft/block/BlockPressurePlate.java b/net/minecraft/block/BlockPressurePlate.java
index ca02540..30d0505 100644
--- a/net/minecraft/block/BlockPressurePlate.java
+++ b/net/minecraft/block/BlockPressurePlate.java
@@ -77,7 +77,7 @@ public class BlockPressurePlate extends BlockBasePressurePlate {
 
   protected int computeRedstoneStrength(World var1, BlockPos var2) {
     AxisAlignedBB var3 = PRESSURE_AABB.offset(var2);
-    List var4;
+    List<Entity> var4; // BCMP
     switch (this.sensitivity) {
       case EVERYTHING:
         var4 = var1.getEntitiesWithinAABBExcludingEntity((Entity) null, var3);
diff --git a/net/minecraft/block/BlockSponge.java b/net/minecraft/block/BlockSponge.java
index 8801306..17a04a8 100644
--- a/net/minecraft/block/BlockSponge.java
+++ b/net/minecraft/block/BlockSponge.java
@@ -52,7 +52,7 @@ public class BlockSponge extends Block {
 
   private boolean absorb(World var1, BlockPos var2) {
     LinkedList var3 = Lists.newLinkedList();
-    ArrayList var4 = Lists.newArrayList();
+    ArrayList<BlockPos> var4 = Lists.newArrayList(); // BCMP
     var3.add(new Tuple(var2, Integer.valueOf(0)));
     int var5 = 0;
 
diff --git a/net/minecraft/block/BlockStairs.java b/net/minecraft/block/BlockStairs.java
index 76f6f07..7bc1e09 100644
--- a/net/minecraft/block/BlockStairs.java
+++ b/net/minecraft/block/BlockStairs.java
@@ -278,7 +278,7 @@ public class BlockStairs extends Block {
   @Nullable
   public RayTraceResult collisionRayTrace(
       IBlockState var1, World var2, BlockPos var3, Vec3d var4, Vec3d var5) {
-    ArrayList var6 = Lists.newArrayList();
+    ArrayList<RayTraceResult> var6 = Lists.newArrayList(); // BCMP
 
     for (AxisAlignedBB var8 : getCollisionBoxList(this.getActualState(var1, var2, var3))) {
       var6.add(this.rayTrace(var3, var4, var5, var8));
diff --git a/net/minecraft/block/BlockTripWire.java b/net/minecraft/block/BlockTripWire.java
index ebb2f42..5e88383 100644
--- a/net/minecraft/block/BlockTripWire.java
+++ b/net/minecraft/block/BlockTripWire.java
@@ -145,7 +145,7 @@ public class BlockTripWire extends Block {
     IBlockState var3 = var1.getBlockState(var2);
     boolean var4 = ((Boolean) var3.getValue(POWERED)).booleanValue();
     boolean var5 = false;
-    List var6 =
+    List<Entity> var6 = // BCMP
         var1.getEntitiesWithinAABBExcludingEntity(
             (Entity) null, var3.getBoundingBox(var1, var2).offset(var2));
     if (!var6.isEmpty()) {
diff --git a/net/minecraft/block/state/pattern/BlockStateMatcher.java b/net/minecraft/block/state/pattern/BlockStateMatcher.java
index de57fca..50c9265 100644
--- a/net/minecraft/block/state/pattern/BlockStateMatcher.java
+++ b/net/minecraft/block/state/pattern/BlockStateMatcher.java
@@ -43,7 +43,7 @@ public class BlockStateMatcher implements Predicate<IBlockState> {
   }
 
   protected <T extends Comparable<T>> boolean matches(
-      IBlockState var1, IProperty<T> var2, Predicate<?> var3) {
+      IBlockState var1, IProperty<T> var2, Predicate<T> var3) { // BCMP
     return var3.apply(var1.getValue(var2));
   }
 
diff --git a/net/minecraft/block/state/pattern/FactoryBlockPattern.java b/net/minecraft/block/state/pattern/FactoryBlockPattern.java
index 17568c1..e7f24b3 100644
--- a/net/minecraft/block/state/pattern/FactoryBlockPattern.java
+++ b/net/minecraft/block/state/pattern/FactoryBlockPattern.java
@@ -53,7 +53,7 @@ public class FactoryBlockPattern {
 
           for (char var9 : var5.toCharArray()) {
             if (!this.symbolMap.containsKey(Character.valueOf(var9))) {
-              this.symbolMap.put(Character.valueOf(var9), (Object) null);
+              this.symbolMap.put(Character.valueOf(var9), null); // BCMP
             }
           }
         }
diff --git a/net/minecraft/command/CommandFill.java b/net/minecraft/command/CommandFill.java
index ab6bc6d..59571b5 100644
--- a/net/minecraft/command/CommandFill.java
+++ b/net/minecraft/command/CommandFill.java
@@ -91,7 +91,7 @@ public class CommandFill extends CommandBase {
           }
         }
 
-        ArrayList var26 = Lists.newArrayList();
+        ArrayList<BlockPos> var26 = Lists.newArrayList(); // BCMP
         var10 = 0;
 
         for (int var15 = var8.getZ(); var15 <= var9.getZ(); ++var15) {
diff --git a/net/minecraft/command/server/CommandAchievement.java b/net/minecraft/command/server/CommandAchievement.java
index a5c7dd7..ddd41b0 100644
--- a/net/minecraft/command/server/CommandAchievement.java
+++ b/net/minecraft/command/server/CommandAchievement.java
@@ -77,7 +77,7 @@ public class CommandAchievement extends CommandBase {
                       new Object[] {var5.getName(), var4.createChatComponent()});
                 }
 
-                ArrayList var9;
+                ArrayList<Achievement> var9; // BCMP
                 for (var9 = Lists.newArrayList();
                     var8.parentAchievement != null
                         && !var5.getStatFile().hasAchievementUnlocked(var8.parentAchievement);
@@ -95,7 +95,7 @@ public class CommandAchievement extends CommandBase {
                       new Object[] {var5.getName(), var4.createChatComponent()});
                 }
 
-                ArrayList var17 =
+                ArrayList<Achievement> var17 = // BCMP
                     Lists.newArrayList(
                         Iterators.filter(
                             AchievementList.ACHIEVEMENTS.iterator(),
@@ -105,7 +105,7 @@ public class CommandAchievement extends CommandBase {
                                     && var1 != var4;
                               }
                             }));
-                ArrayList var20 = Lists.newArrayList(var17);
+                ArrayList<Achievement> var20 = Lists.newArrayList(var17); // BCMP
 
                 for (Achievement var12 : var17) {
                   Achievement var13 = var12;
diff --git a/net/minecraft/enchantment/EnchantmentHelper.java b/net/minecraft/enchantment/EnchantmentHelper.java
index 83c4515..b36c9e1 100644
--- a/net/minecraft/enchantment/EnchantmentHelper.java
+++ b/net/minecraft/enchantment/EnchantmentHelper.java
@@ -165,7 +165,7 @@ public class EnchantmentHelper {
   }
 
   public static int getMaxEnchantmentLevel(Enchantment var0, EntityLivingBase var1) {
-    Iterable var2 = var0.getEntityEquipment(var1);
+    Iterable<ItemStack> var2 = var0.getEntityEquipment(var1); // BCMP
     if (var2 == null) {
       return 0;
     } else {
@@ -220,7 +220,7 @@ public class EnchantmentHelper {
 
   @Nullable
   public static ItemStack getEnchantedItem(Enchantment var0, EntityLivingBase var1) {
-    Iterable var2 = var0.getEntityEquipment(var1);
+    Iterable<ItemStack> var2 = var0.getEntityEquipment(var1); // BCMP
     if (var2 == null) {
       return null;
     } else {
@@ -256,7 +256,7 @@ public class EnchantmentHelper {
   public static ItemStack addRandomEnchantment(
       Random var0, ItemStack var1, int var2, boolean var3) {
     boolean var4 = var1.getItem() == Items.BOOK;
-    List var5 = buildEnchantmentList(var0, var1, var2, var3);
+    List<EnchantmentData> var5 = buildEnchantmentList(var0, var1, var2, var3); // BCMP
     if (var4) {
       var1.setItem(Items.ENCHANTED_BOOK);
     }
diff --git a/net/minecraft/entity/EntityAreaEffectCloud.java b/net/minecraft/entity/EntityAreaEffectCloud.java
index bf16003..821d92a 100644
--- a/net/minecraft/entity/EntityAreaEffectCloud.java
+++ b/net/minecraft/entity/EntityAreaEffectCloud.java
@@ -265,7 +265,7 @@ public class EntityAreaEffectCloud extends Entity {
           }
         }
 
-        ArrayList var19 = Lists.newArrayList();
+        ArrayList<PotionEffect> var19 = Lists.newArrayList(); // BCMP
 
         for (PotionEffect var25 : this.potion.getEffects()) {
           var19.add(
@@ -281,7 +281,7 @@ public class EntityAreaEffectCloud extends Entity {
         if (var19.isEmpty()) {
           this.reapplicationDelayMap.clear();
         } else {
-          List var23 =
+          List<EntityLivingBase> var23 = // BCMP
               this.worldObj.getEntitiesWithinAABB(
                   EntityLivingBase.class, this.getEntityBoundingBox());
           if (!var23.isEmpty()) {
diff --git a/net/minecraft/entity/ai/EntityAIAvoidEntity.java b/net/minecraft/entity/ai/EntityAIAvoidEntity.java
index d2c2b5c..d4c38d4 100644
--- a/net/minecraft/entity/ai/EntityAIAvoidEntity.java
+++ b/net/minecraft/entity/ai/EntityAIAvoidEntity.java
@@ -55,7 +55,7 @@ public class EntityAIAvoidEntity<T extends Entity> extends EntityAIBase {
   }
 
   public boolean shouldExecute() {
-    List var1 =
+    List<T> var1 = // BCMP
         this.theEntity.worldObj.getEntitiesWithinAABB(
             this.classToAvoid,
             this.theEntity
@@ -68,7 +68,7 @@ public class EntityAIAvoidEntity<T extends Entity> extends EntityAIBase {
     if (var1.isEmpty()) {
       return false;
     } else {
-      this.closestLivingEntity = (Entity) var1.get(0);
+      this.closestLivingEntity = var1.get(0); // BCMP
       Vec3d var2 =
           RandomPositionGenerator.findRandomTargetBlockAwayFrom(
               this.theEntity,
diff --git a/net/minecraft/entity/ai/EntityAIFollowGolem.java b/net/minecraft/entity/ai/EntityAIFollowGolem.java
index 51311df..a82fb3e 100644
--- a/net/minecraft/entity/ai/EntityAIFollowGolem.java
+++ b/net/minecraft/entity/ai/EntityAIFollowGolem.java
@@ -22,7 +22,7 @@ public class EntityAIFollowGolem extends EntityAIBase {
     } else if (!this.theVillager.worldObj.isDaytime()) {
       return false;
     } else {
-      List var1 =
+      List<EntityIronGolem> var1 = // BCMP
           this.theVillager.worldObj.getEntitiesWithinAABB(
               EntityIronGolem.class,
               this.theVillager.getEntityBoundingBox().expand(6.0D, 2.0D, 6.0D));
diff --git a/net/minecraft/entity/ai/EntityAIFollowParent.java b/net/minecraft/entity/ai/EntityAIFollowParent.java
index 73dc3ff..519e2c4 100644
--- a/net/minecraft/entity/ai/EntityAIFollowParent.java
+++ b/net/minecraft/entity/ai/EntityAIFollowParent.java
@@ -19,7 +19,7 @@ public class EntityAIFollowParent extends EntityAIBase {
     if (this.childAnimal.getGrowingAge() >= 0) {
       return false;
     } else {
-      List var1 =
+      List<EntityAnimal> var1 = // BCMP
           this.childAnimal.worldObj.getEntitiesWithinAABB(
               this.childAnimal.getClass(),
               this.childAnimal.getEntityBoundingBox().expand(8.0D, 4.0D, 8.0D));
diff --git a/net/minecraft/entity/ai/EntityAIMate.java b/net/minecraft/entity/ai/EntityAIMate.java
index 3497e77..7c3dc67 100644
--- a/net/minecraft/entity/ai/EntityAIMate.java
+++ b/net/minecraft/entity/ai/EntityAIMate.java
@@ -59,8 +59,8 @@ public class EntityAIMate extends EntityAIBase {
     }
   }
 
-  private EntityAnimal getNearbyMate() {
-    List var1 =
+  private EntityAnimal getNearbyMate() { // Cruisin' for chicks!
+    List<EntityAnimal> var1 = // BCMP
         this.theWorld.getEntitiesWithinAABB(
             this.theAnimal.getClass(), this.theAnimal.getEntityBoundingBox().expandXyz(8.0D));
     double var2 = Double.MAX_VALUE;
diff --git a/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java b/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
index 27f1ee2..72c10ec 100644
--- a/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
+++ b/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
@@ -67,7 +67,7 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
     if (this.targetChance > 0 && this.taskOwner.getRNG().nextInt(this.targetChance) != 0) {
       return false;
     } else if (this.targetClass != EntityPlayer.class && this.targetClass != EntityPlayerMP.class) {
-      List var1 =
+      List<T> var1 = // BCMP
           this.taskOwner.worldObj.getEntitiesWithinAABB(
               this.targetClass,
               this.getTargetableArea(this.getTargetDistance()),
@@ -76,44 +76,44 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
         return false;
       } else {
         Collections.sort(var1, this.theNearestAttackableTargetSorter);
-        this.targetEntity = (EntityLivingBase) var1.get(0);
+        this.targetEntity = (T) var1.get(0); // BCMP
         return true;
       }
     } else {
       this.targetEntity =
-          this.taskOwner.worldObj.getNearestAttackablePlayer(
-              this.taskOwner.posX,
-              this.taskOwner.posY + (double) this.taskOwner.getEyeHeight(),
-              this.taskOwner.posZ,
-              this.getTargetDistance(),
-              this.getTargetDistance(),
-              new Function<EntityPlayer, Double>() {
-                @Nullable
-                public Double apply(@Nullable EntityPlayer var1) {
-                  ItemStack var2 = var1.getItemStackFromSlot(EntityEquipmentSlot.HEAD);
-                  if (var2 != null && var2.getItem() == Items.SKULL) {
-                    int var3 = var2.getItemDamage();
-                    boolean var4 =
-                        EntityAINearestAttackableTarget.this.taskOwner instanceof EntitySkeleton
-                            && ((EntitySkeleton) EntityAINearestAttackableTarget.this.taskOwner)
-                                    .getSkeletonType()
-                                == 0
-                            && var3 == 0;
-                    boolean var5 =
-                        EntityAINearestAttackableTarget.this.taskOwner instanceof EntityZombie
-                            && var3 == 2;
-                    boolean var6 =
-                        EntityAINearestAttackableTarget.this.taskOwner instanceof EntityCreeper
-                            && var3 == 4;
-                    if (var4 || var5 || var6) {
-                      return Double.valueOf(0.5D);
-                    }
-                  }
+              (T) this.taskOwner.worldObj.getNearestAttackablePlayer( // BCMP
+                  this.taskOwner.posX,
+                  this.taskOwner.posY + (double) this.taskOwner.getEyeHeight(),
+                  this.taskOwner.posZ,
+                  this.getTargetDistance(),
+                  this.getTargetDistance(),
+                  new Function<EntityPlayer, Double>() {
+                    @Nullable
+                    public Double apply(@Nullable EntityPlayer var1) {
+                      ItemStack var2 = var1.getItemStackFromSlot(EntityEquipmentSlot.HEAD);
+                      if (var2 != null && var2.getItem() == Items.SKULL) {
+                        int var3 = var2.getItemDamage();
+                        boolean var4 =
+                            EntityAINearestAttackableTarget.this.taskOwner instanceof EntitySkeleton
+                                && ((EntitySkeleton) EntityAINearestAttackableTarget.this.taskOwner)
+                                        .getSkeletonType()
+                                    == 0
+                                && var3 == 0;
+                        boolean var5 =
+                            EntityAINearestAttackableTarget.this.taskOwner instanceof EntityZombie
+                                && var3 == 2;
+                        boolean var6 =
+                            EntityAINearestAttackableTarget.this.taskOwner instanceof EntityCreeper
+                                && var3 == 4;
+                        if (var4 || var5 || var6) {
+                          return Double.valueOf(0.5D);
+                        }
+                      }
 
-                  return Double.valueOf(1.0D);
-                }
-              },
-              this.targetEntitySelector);
+                      return Double.valueOf(1.0D);
+                    }
+                  },
+                      (Predicate<EntityPlayer>) this.targetEntitySelector); // BCMP
       return this.targetEntity != null;
     }
   }
diff --git a/net/minecraft/entity/ai/EntityAIPlay.java b/net/minecraft/entity/ai/EntityAIPlay.java
index 41e9304..a8f50b9 100644
--- a/net/minecraft/entity/ai/EntityAIPlay.java
+++ b/net/minecraft/entity/ai/EntityAIPlay.java
@@ -25,7 +25,7 @@ public class EntityAIPlay extends EntityAIBase {
     } else if (this.villagerObj.getRNG().nextInt(400) != 0) {
       return false;
     } else {
-      List var1 =
+      List<EntityVillager> var1 = // BCMP
           this.villagerObj.worldObj.getEntitiesWithinAABB(
               EntityVillager.class,
               this.villagerObj.getEntityBoundingBox().expand(6.0D, 3.0D, 6.0D));
diff --git a/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java b/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
index 9d1ecc1..1d0c6e8 100644
--- a/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
+++ b/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
@@ -75,7 +75,7 @@ public class ModifiableAttributeInstance implements IAttributeInstance {
     if (this.getModifier(var1.getID()) != null) {
       throw new IllegalArgumentException("Modifier is already applied on this attribute!");
     } else {
-      Object var2 = (Set) this.mapByName.get(var1.getName());
+      Set<AttributeModifier> var2 = (Set) this.mapByName.get(var1.getName()); // BCMP
       if (var2 == null) {
         var2 = Sets.newHashSet();
         this.mapByName.put(var1.getName(), var2);
diff --git a/net/minecraft/entity/boss/EntityDragon.java b/net/minecraft/entity/boss/EntityDragon.java
index 0fe95fa..790cf92 100644
--- a/net/minecraft/entity/boss/EntityDragon.java
+++ b/net/minecraft/entity/boss/EntityDragon.java
@@ -455,7 +455,7 @@ public class EntityDragon extends EntityLiving implements IEntityMultiPart, IMob
     }
 
     if (this.rand.nextInt(10) == 0) {
-      List var1 =
+      List<EntityEnderCrystal> var1 = // BCMP
           this.worldObj.getEntitiesWithinAABB(
               EntityEnderCrystal.class, this.getEntityBoundingBox().expandXyz(32.0D));
       EntityEnderCrystal var2 = null;
diff --git a/net/minecraft/entity/monster/EntityShulker.java b/net/minecraft/entity/monster/EntityShulker.java
index 4aa8eab..fa9335a 100644
--- a/net/minecraft/entity/monster/EntityShulker.java
+++ b/net/minecraft/entity/monster/EntityShulker.java
@@ -318,7 +318,7 @@ public class EntityShulker extends EntityGolem implements IMob {
       }
 
       if (var27 > 0.0D) {
-        List var16 =
+        List<Entity> var16 = // BCMP
             this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox());
         if (!var16.isEmpty()) {
           for (Entity var18 : var16) {
diff --git a/net/minecraft/entity/projectile/EntityDragonFireball.java b/net/minecraft/entity/projectile/EntityDragonFireball.java
index ad3b195..f93bb51 100644
--- a/net/minecraft/entity/projectile/EntityDragonFireball.java
+++ b/net/minecraft/entity/projectile/EntityDragonFireball.java
@@ -26,7 +26,7 @@ public class EntityDragonFireball extends EntityFireball {
 
   protected void onImpact(RayTraceResult var1) {
     if (!this.worldObj.isRemote) {
-      List var2 =
+      List<EntityLivingBase> var2 = // BCMP
           this.worldObj.getEntitiesWithinAABB(
               EntityLivingBase.class, this.getEntityBoundingBox().expand(4.0D, 2.0D, 4.0D));
       EntityAreaEffectCloud var3 =
diff --git a/net/minecraft/entity/projectile/EntityPotion.java b/net/minecraft/entity/projectile/EntityPotion.java
index 23283e0..3f9d9ac 100644
--- a/net/minecraft/entity/projectile/EntityPotion.java
+++ b/net/minecraft/entity/projectile/EntityPotion.java
@@ -80,7 +80,7 @@ public class EntityPotion extends EntityThrowable {
     if (!this.worldObj.isRemote) {
       ItemStack var2 = this.getPotion();
       PotionType var3 = PotionUtils.getPotionFromItem(var2);
-      List var4 = PotionUtils.getEffectsFromStack(var2);
+      List<PotionEffect> var4 = PotionUtils.getEffectsFromStack(var2); // BCMP
       if (var1.typeOfHit == RayTraceResult.Type.BLOCK
           && var3 == PotionTypes.WATER
           && var4.isEmpty()) {
@@ -113,7 +113,7 @@ public class EntityPotion extends EntityThrowable {
             this.worldObj.spawnEntityInWorld(var5);
           } else {
             AxisAlignedBB var17 = this.getEntityBoundingBox().expand(4.0D, 2.0D, 4.0D);
-            List var19 = this.worldObj.getEntitiesWithinAABB(EntityLivingBase.class, var17);
+            List<EntityLivingBase> var19 = this.worldObj.getEntitiesWithinAABB(EntityLivingBase.class, var17); // BCMP
             if (!var19.isEmpty()) {
               for (EntityLivingBase var8 : var19) {
                 if (var8.canBeHitWithPotion()) {
diff --git a/net/minecraft/entity/projectile/EntityTippedArrow.java b/net/minecraft/entity/projectile/EntityTippedArrow.java
index b4a5325..068348a 100644
--- a/net/minecraft/entity/projectile/EntityTippedArrow.java
+++ b/net/minecraft/entity/projectile/EntityTippedArrow.java
@@ -41,7 +41,7 @@ public class EntityTippedArrow extends EntityArrow {
   public void setPotionEffect(ItemStack var1) {
     if (var1.getItem() == Items.TIPPED_ARROW) {
       this.potion = PotionUtils.getPotionTypeFromNBT(var1.getTagCompound());
-      List var2 = PotionUtils.getFullEffectsFromItem(var1);
+      List<PotionEffect> var2 = PotionUtils.getFullEffectsFromItem(var1); // BCMP
       if (!var2.isEmpty()) {
         for (PotionEffect var4 : var2) {
           this.customPotionEffects.add(new PotionEffect(var4));
diff --git a/net/minecraft/item/ItemSlab.java b/net/minecraft/item/ItemSlab.java
index 02728a2..6681051 100644
--- a/net/minecraft/item/ItemSlab.java
+++ b/net/minecraft/item/ItemSlab.java
@@ -114,6 +114,6 @@ public class ItemSlab extends ItemBlock {
   }
 
   protected <T extends Comparable<T>> IBlockState makeState(IProperty<T> var1, Comparable<?> var2) {
-    return this.doubleSlab.getDefaultState().withProperty(var1, var2);
+    return this.doubleSlab.getDefaultState().withProperty(var1, (T)var2); // BCMP
   }
 }
diff --git a/net/minecraft/item/crafting/ShapelessRecipes.java b/net/minecraft/item/crafting/ShapelessRecipes.java
index 9d36664..d26c263 100644
--- a/net/minecraft/item/crafting/ShapelessRecipes.java
+++ b/net/minecraft/item/crafting/ShapelessRecipes.java
@@ -37,7 +37,7 @@ public class ShapelessRecipes implements IRecipe {
   }
 
   public boolean matches(InventoryCrafting var1, World var2) {
-    ArrayList var3 = Lists.newArrayList(this.recipeItems);
+    ArrayList<ItemStack> var3 = Lists.newArrayList(this.recipeItems); // BCMP
 
     for (int var4 = 0; var4 < var1.getHeight(); ++var4) {
       for (int var5 = 0; var5 < var1.getWidth(); ++var5) {
diff --git a/net/minecraft/pathfinding/WalkNodeProcessor.java b/net/minecraft/pathfinding/WalkNodeProcessor.java
index c655743..d50fba1 100644
--- a/net/minecraft/pathfinding/WalkNodeProcessor.java
+++ b/net/minecraft/pathfinding/WalkNodeProcessor.java
@@ -75,7 +75,7 @@ public class WalkNodeProcessor extends NodeProcessor {
     BlockPos var9 = new BlockPos(this.entity);
     PathNodeType var10 = this.getPathNodeType(this.entity, var9.getX(), var1, var9.getZ());
     if (this.entity.getPathPriority(var10) < 0.0F) {
-      HashSet var4 = new HashSet();
+      HashSet<BlockPos> var4 = new HashSet(); // BCMP
       var4.add(
           new BlockPos(
               this.entity.getEntityBoundingBox().minX,
@@ -312,7 +312,7 @@ public class WalkNodeProcessor extends NodeProcessor {
       int var8,
       boolean var9,
       boolean var10) {
-    EnumSet var11 = EnumSet.noneOf(PathNodeType.class);
+    EnumSet<PathNodeType> var11 = EnumSet.noneOf(PathNodeType.class); // BCMP
     PathNodeType var12 = PathNodeType.BLOCKED;
     double var13 = (double) var5.width / 2.0D;
     BlockPos var15 = new BlockPos(var5);
diff --git a/net/minecraft/tileentity/TileEntityBeacon.java b/net/minecraft/tileentity/TileEntityBeacon.java
index b54ae18..adc7d46 100644
--- a/net/minecraft/tileentity/TileEntityBeacon.java
+++ b/net/minecraft/tileentity/TileEntityBeacon.java
@@ -88,7 +88,7 @@ public class TileEntityBeacon extends TileEntityLockable implements ITickable, I
                   (double) (var7 + 1)))
               .expandXyz(var1)
               .addCoord(0.0D, (double) this.worldObj.getHeight(), 0.0D);
-      List var9 = this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, var8);
+      List<EntityPlayer> var9 = this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, var8); // BCMP
 
       for (EntityPlayer var11 : var9) {
         var11.addPotionEffect(new PotionEffect(this.primaryEffect, var4, var3, true, true));
diff --git a/net/minecraft/util/LowerStringMap.java b/net/minecraft/util/LowerStringMap.java
index 6e1191d..7d5fe55 100644
--- a/net/minecraft/util/LowerStringMap.java
+++ b/net/minecraft/util/LowerStringMap.java
@@ -39,7 +39,7 @@ public class LowerStringMap<V> implements Map<String, V> {
 
   public void putAll(Map<? extends String, ? extends V> var1) {
     for (Entry var3 : var1.entrySet()) {
-      this.put((String) var3.getKey(), var3.getValue());
+      this.put((String) var3.getKey(), ((Entry<String, V>)var3).getValue()); // BCMP
     }
   }
 
diff --git a/net/minecraft/util/MapPopulator.java b/net/minecraft/util/MapPopulator.java
index a057351..a288c4b 100644
--- a/net/minecraft/util/MapPopulator.java
+++ b/net/minecraft/util/MapPopulator.java
@@ -11,9 +11,9 @@ public class MapPopulator {
   }
 
   public static <K, V> Map<K, V> populateMap(Iterable<K> var0, Iterable<V> var1, Map<K, V> var2) {
-    Iterator var3 = var1.iterator();
+    Iterator<V> var3 = var1.iterator(); // BCMP
 
-    for (Object var5 : var0) {
+    for (K var5 : var0) { // BCMP
       var2.put(var5, var3.next());
     }
 
diff --git a/net/minecraft/util/math/Cartesian.java b/net/minecraft/util/math/Cartesian.java
index 93855fe..e6e5849 100644
--- a/net/minecraft/util/math/Cartesian.java
+++ b/net/minecraft/util/math/Cartesian.java
@@ -46,7 +46,7 @@ public class Cartesian {
     private GetList() {}
 
     public List<T> apply(@Nullable Object[] var1) {
-      return Arrays.asList((Object[]) var1);
+      return Arrays.asList((T[]) var1); // BCMP
     }
   }
 
diff --git a/net/minecraft/world/end/DragonFightManager.java b/net/minecraft/world/end/DragonFightManager.java
index 86c658c..919d767 100644
--- a/net/minecraft/world/end/DragonFightManager.java
+++ b/net/minecraft/world/end/DragonFightManager.java
@@ -329,7 +329,7 @@ public class DragonFightManager {
       var1.add(var3);
     }
 
-    HashSet var5 = Sets.newHashSet(this.bossInfo.getPlayers());
+    HashSet<EntityPlayerMP> var5 = Sets.newHashSet(this.bossInfo.getPlayers()); // BCMP
     var5.removeAll(var1);
 
     for (EntityPlayerMP var4 : var5) {
diff --git a/net/minecraft/world/gen/FlatGeneratorInfo.java b/net/minecraft/world/gen/FlatGeneratorInfo.java
index 53ef89e..2319a31 100644
--- a/net/minecraft/world/gen/FlatGeneratorInfo.java
+++ b/net/minecraft/world/gen/FlatGeneratorInfo.java
@@ -69,7 +69,7 @@ public class FlatGeneratorInfo {
         }
 
         var1.append(((String) var4.getKey()).toLowerCase());
-        Map var5 = (Map) var4.getValue();
+        Map<String, String> var5 = (Map) var4.getValue(); // BCMP
         if (!var5.isEmpty()) {
           var1.append("(");
           int var6 = 0;
diff --git a/net/minecraft/world/gen/structure/StructureComponentTemplate.java b/net/minecraft/world/gen/structure/StructureComponentTemplate.java
index 3290074..30adc20 100644
--- a/net/minecraft/world/gen/structure/StructureComponentTemplate.java
+++ b/net/minecraft/world/gen/structure/StructureComponentTemplate.java
@@ -52,7 +52,7 @@ public abstract class StructureComponentTemplate extends StructureComponent {
   public boolean addComponentParts(World var1, Random var2, StructureBoundingBox var3) {
     this.placeSettings.setBoundingBox(var3);
     this.template.addBlocksToWorld(var1, this.templatePosition, this.placeSettings);
-    Map var4 = this.template.getDataBlocks(this.templatePosition, this.placeSettings);
+    Map<BlockPos, String> var4 = this.template.getDataBlocks(this.templatePosition, this.placeSettings); // BCMP
 
     for (BlockPos var6 : var4.keySet()) {
       String var7 = (String) var4.get(var6);
diff --git a/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java b/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
index bc34442..3f9217d 100644
--- a/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
+++ b/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
@@ -902,7 +902,7 @@ public class StructureOceanMonumentPieces {
             new StructureBoundingBox(var2, 39, var3, var2 + 58 - 1, 61, var3 + 58 - 1);
       }
 
-      List var6 = this.generateRoomGraph(var1);
+      List<RoomDefinition> var6 = this.generateRoomGraph(var1); // BCMP
       this.sourceRoom.claimed = true;
       this.childPieces.add(new StructureOceanMonumentPieces.EntryRoom(var5, this.sourceRoom));
       this.childPieces.add(
@@ -1065,7 +1065,7 @@ public class StructureOceanMonumentPieces {
                   EnumFacing.UP.getIndex()]
               .claimed =
           true;
-      ArrayList var30 = Lists.newArrayList();
+      ArrayList<RoomDefinition> var30 = Lists.newArrayList(); // BCMP
 
       for (StructureOceanMonumentPieces.RoomDefinition var37 : var2) {
         if (var37 != null) {
diff --git a/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java b/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
index e99e454..837bce1 100644
--- a/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
+++ b/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
@@ -59,7 +59,7 @@ public class EntityHasProperty implements LootCondition {
     }
 
     public EntityHasProperty deserialize(JsonObject var1, JsonDeserializationContext var2) {
-      Set var3 = JsonUtils.getJsonObject(var1, "properties").entrySet();
+      Set<Entry<String, JsonElement>> var3 = JsonUtils.getJsonObject(var1, "properties").entrySet(); // BCMP
       EntityProperty[] var4 = new EntityProperty[var3.size()];
       int var5 = 0;
 
-- 
2.5.5

