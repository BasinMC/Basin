From f19de14af1fbe3f9de875b8ef45a53136e675e33 Mon Sep 17 00:00:00 2001
From: 0x277F <0x277F@gmail.com>
Date: Thu, 2 Jun 2016 19:57:10 -0600
Subject: [PATCH] Fixed compilation errors.


diff --git a/net/minecraft/block/BlockDynamicLiquid.java b/net/minecraft/block/BlockDynamicLiquid.java
index c02cded..355cd3b 100644
--- a/net/minecraft/block/BlockDynamicLiquid.java
+++ b/net/minecraft/block/BlockDynamicLiquid.java
@@ -109,7 +109,7 @@ public class BlockDynamicLiquid extends BlockLiquid {
         this.tryFlowInto(var1, var2.down(), var14, var5 + 8);
       }
     } else if (var5 >= 0 && (var5 == 0 || this.isBlocked(var1, var2.down(), var14))) {
-      Set var16 = this.getPossibleFlowDirections(var1, var2);
+      Set<EnumFacing> var16 = this.getPossibleFlowDirections(var1, var2); // BCMP
       int var18 = var5 + var6;
       if (var5 >= 8) {
         var18 = 1;
diff --git a/net/minecraft/block/BlockPressurePlate.java b/net/minecraft/block/BlockPressurePlate.java
index ca02540..30d0505 100644
--- a/net/minecraft/block/BlockPressurePlate.java
+++ b/net/minecraft/block/BlockPressurePlate.java
@@ -77,7 +77,7 @@ public class BlockPressurePlate extends BlockBasePressurePlate {
 
   protected int computeRedstoneStrength(World var1, BlockPos var2) {
     AxisAlignedBB var3 = PRESSURE_AABB.offset(var2);
-    List var4;
+    List<Entity> var4; // BCMP
     switch (this.sensitivity) {
       case EVERYTHING:
         var4 = var1.getEntitiesWithinAABBExcludingEntity((Entity) null, var3);
diff --git a/net/minecraft/block/BlockRedstoneWire.java b/net/minecraft/block/BlockRedstoneWire.java
index 4cdb2f7..bccec08 100644
--- a/net/minecraft/block/BlockRedstoneWire.java
+++ b/net/minecraft/block/BlockRedstoneWire.java
@@ -160,7 +160,7 @@ public class BlockRedstoneWire extends Block {
 
   private IBlockState updateSurroundingRedstone(World var1, BlockPos var2, IBlockState var3) {
     var3 = this.calculateCurrentChanges(var1, var2, var2, var3);
-    ArrayList var4 = Lists.newArrayList(this.blocksNeedingUpdate);
+    ArrayList<BlockPos> var4 = Lists.newArrayList(this.blocksNeedingUpdate); // BCMP
     this.blocksNeedingUpdate.clear();
 
     for (BlockPos var6 : var4) {
diff --git a/net/minecraft/block/BlockSponge.java b/net/minecraft/block/BlockSponge.java
index 8801306..17a04a8 100644
--- a/net/minecraft/block/BlockSponge.java
+++ b/net/minecraft/block/BlockSponge.java
@@ -52,7 +52,7 @@ public class BlockSponge extends Block {
 
   private boolean absorb(World var1, BlockPos var2) {
     LinkedList var3 = Lists.newLinkedList();
-    ArrayList var4 = Lists.newArrayList();
+    ArrayList<BlockPos> var4 = Lists.newArrayList(); // BCMP
     var3.add(new Tuple(var2, Integer.valueOf(0)));
     int var5 = 0;
 
diff --git a/net/minecraft/block/BlockStairs.java b/net/minecraft/block/BlockStairs.java
index 76f6f07..7bc1e09 100644
--- a/net/minecraft/block/BlockStairs.java
+++ b/net/minecraft/block/BlockStairs.java
@@ -278,7 +278,7 @@ public class BlockStairs extends Block {
   @Nullable
   public RayTraceResult collisionRayTrace(
       IBlockState var1, World var2, BlockPos var3, Vec3d var4, Vec3d var5) {
-    ArrayList var6 = Lists.newArrayList();
+    ArrayList<RayTraceResult> var6 = Lists.newArrayList(); // BCMP
 
     for (AxisAlignedBB var8 : getCollisionBoxList(this.getActualState(var1, var2, var3))) {
       var6.add(this.rayTrace(var3, var4, var5, var8));
diff --git a/net/minecraft/block/BlockTripWire.java b/net/minecraft/block/BlockTripWire.java
index ebb2f42..5e88383 100644
--- a/net/minecraft/block/BlockTripWire.java
+++ b/net/minecraft/block/BlockTripWire.java
@@ -145,7 +145,7 @@ public class BlockTripWire extends Block {
     IBlockState var3 = var1.getBlockState(var2);
     boolean var4 = ((Boolean) var3.getValue(POWERED)).booleanValue();
     boolean var5 = false;
-    List var6 =
+    List<Entity> var6 = // BCMP
         var1.getEntitiesWithinAABBExcludingEntity(
             (Entity) null, var3.getBoundingBox(var1, var2).offset(var2));
     if (!var6.isEmpty()) {
diff --git a/net/minecraft/block/properties/PropertyEnum.java b/net/minecraft/block/properties/PropertyEnum.java
index 26c47c7..11f950c 100644
--- a/net/minecraft/block/properties/PropertyEnum.java
+++ b/net/minecraft/block/properties/PropertyEnum.java
@@ -20,7 +20,7 @@ public class PropertyEnum<T extends Enum<T> & IStringSerializable> extends Prope
     super(var1, var2);
     this.allowedValues = ImmutableSet.copyOf(var3);
 
-    for (Enum var5 : var3) {
+    for (T var5 : var3) { // BCMP
       String var6 = ((IStringSerializable) var5).getName();
       if (this.nameToValue.containsKey(var6)) {
         throw new IllegalArgumentException("Multiple values have the same name \'" + var6 + "\'");
diff --git a/net/minecraft/block/state/BlockStateBase.java b/net/minecraft/block/state/BlockStateBase.java
index 03ce4d8..3edc18b 100644
--- a/net/minecraft/block/state/BlockStateBase.java
+++ b/net/minecraft/block/state/BlockStateBase.java
@@ -27,13 +27,13 @@ public abstract class BlockStateBase implements IBlockState {
 
         private <T extends Comparable<T>> String getPropertyName(
             IProperty<T> var1, Comparable<?> var2) {
-          return var1.getName(var2);
+          return var1.getName((T) var2); // BCMP
         }
       };
 
   public <T extends Comparable<T>> IBlockState cycleProperty(IProperty<T> var1) {
     return this.withProperty(
-        var1, (Comparable) cyclePropertyValue(var1.getAllowedValues(), this.getValue(var1)));
+        var1, cyclePropertyValue(var1.getAllowedValues(), this.getValue(var1))); // BCMP
   }
 
   protected static <T> T cyclePropertyValue(Collection<T> var0, T var1) {
diff --git a/net/minecraft/block/state/BlockStateContainer.java b/net/minecraft/block/state/BlockStateContainer.java
index c9a8112..fc8b025 100644
--- a/net/minecraft/block/state/BlockStateContainer.java
+++ b/net/minecraft/block/state/BlockStateContainer.java
@@ -66,7 +66,7 @@ public class BlockStateContainer {
 
     this.properties = ImmutableSortedMap.copyOf(var3);
     LinkedHashMap var11 = Maps.newLinkedHashMap();
-    ArrayList var12 = Lists.newArrayList();
+    ArrayList<BlockStateContainer.StateImplementation> var12 = Lists.newArrayList(); // BCMP
 
     for (List var8 : Cartesian.cartesianProduct(this.getAllowedValues())) {
       Map var9 = MapPopulator.createMap(this.properties.values(), var8);
@@ -90,7 +90,7 @@ public class BlockStateContainer {
           "Block: " + var0.getClass() + " has invalidly named property: " + var2);
     } else {
       for (Comparable var4 : var1.getAllowedValues()) {
-        String var5 = var1.getName(var4);
+        String var5 = var1.getName((T) var4); // BCMP
         if (!NAME_PATTERN.matcher(var5).matches()) {
           throw new IllegalArgumentException(
               "Block: "
@@ -223,7 +223,7 @@ public class BlockStateContainer {
         HashBasedTable var2 = HashBasedTable.create();
 
         for (Entry var4 : this.properties.entrySet()) {
-          IProperty var5 = (IProperty) var4.getKey();
+          IProperty<? extends Comparable> var5 = (IProperty<? extends Comparable>) var4.getKey(); // BCMP
 
           for (Comparable var7 : var5.getAllowedValues()) {
             if (var7 != var4.getValue()) {
diff --git a/net/minecraft/block/state/pattern/BlockStateMatcher.java b/net/minecraft/block/state/pattern/BlockStateMatcher.java
index de57fca..50c9265 100644
--- a/net/minecraft/block/state/pattern/BlockStateMatcher.java
+++ b/net/minecraft/block/state/pattern/BlockStateMatcher.java
@@ -43,7 +43,7 @@ public class BlockStateMatcher implements Predicate<IBlockState> {
   }
 
   protected <T extends Comparable<T>> boolean matches(
-      IBlockState var1, IProperty<T> var2, Predicate<?> var3) {
+      IBlockState var1, IProperty<T> var2, Predicate<T> var3) { // BCMP
     return var3.apply(var1.getValue(var2));
   }
 
diff --git a/net/minecraft/block/state/pattern/FactoryBlockPattern.java b/net/minecraft/block/state/pattern/FactoryBlockPattern.java
index 17568c1..e7f24b3 100644
--- a/net/minecraft/block/state/pattern/FactoryBlockPattern.java
+++ b/net/minecraft/block/state/pattern/FactoryBlockPattern.java
@@ -53,7 +53,7 @@ public class FactoryBlockPattern {
 
           for (char var9 : var5.toCharArray()) {
             if (!this.symbolMap.containsKey(Character.valueOf(var9))) {
-              this.symbolMap.put(Character.valueOf(var9), (Object) null);
+              this.symbolMap.put(Character.valueOf(var9), null); // BCMP
             }
           }
         }
diff --git a/net/minecraft/command/CommandClone.java b/net/minecraft/command/CommandClone.java
index 325bfc1..1fca48e 100644
--- a/net/minecraft/command/CommandClone.java
+++ b/net/minecraft/command/CommandClone.java
@@ -84,9 +84,9 @@ public class CommandClone extends CommandBase {
               }
 
               ArrayList var15 = Lists.newArrayList();
-              ArrayList var16 = Lists.newArrayList();
+              ArrayList<StaticCloneData> var16 = Lists.newArrayList(); //BCMP
               ArrayList var17 = Lists.newArrayList();
-              LinkedList var18 = Lists.newLinkedList();
+              LinkedList<BlockPos> var18 = Lists.newLinkedList(); // BCMP
               BlockPos var19 =
                   new BlockPos(var8.minX - var7.minX, var8.minY - var7.minY, var8.minZ - var7.minZ);
 
@@ -135,11 +135,11 @@ public class CommandClone extends CommandBase {
                 }
               }
 
-              ArrayList var31 = Lists.newArrayList();
+              ArrayList<StaticCloneData> var31 = Lists.newArrayList(); // BCMP
               var31.addAll(var15);
               var31.addAll(var16);
               var31.addAll(var17);
-              List var34 = Lists.reverse(var31);
+              List<StaticCloneData> var34 = Lists.reverse(var31); // BCMP
 
               for (CommandClone.StaticCloneData var41 : var34) {
                 TileEntity var46 = var13.getTileEntity(var41.pos);
@@ -175,7 +175,7 @@ public class CommandClone extends CommandBase {
                 var13.notifyNeighborsRespectDebug(var44.pos, var44.blockState.getBlock());
               }
 
-              List var40 = var13.getPendingBlockUpdates(var7, false);
+              List<NextTickListEntry> var40 = var13.getPendingBlockUpdates(var7, false); // BCMP
               if (var40 != null) {
                 for (NextTickListEntry var48 : var40) {
                   if (var7.isVecInside(var48.position)) {
diff --git a/net/minecraft/command/CommandFill.java b/net/minecraft/command/CommandFill.java
index e1d4bdd..c2fc216 100644
--- a/net/minecraft/command/CommandFill.java
+++ b/net/minecraft/command/CommandFill.java
@@ -91,7 +91,7 @@ public class CommandFill extends CommandBase {
           }
         }
 
-        ArrayList var26 = Lists.newArrayList();
+        ArrayList<BlockPos> var26 = Lists.newArrayList(); // BCMP
         var10 = 0;
 
         for (int var15 = var8.getZ(); var15 <= var9.getZ(); ++var15) {
diff --git a/net/minecraft/command/CommandHandler.java b/net/minecraft/command/CommandHandler.java
index 6b0613d..89ee7e5 100644
--- a/net/minecraft/command/CommandHandler.java
+++ b/net/minecraft/command/CommandHandler.java
@@ -50,7 +50,7 @@ public abstract class CommandHandler implements ICommandManager {
       var1.addChatMessage(var8);
     } else if (var5.checkPermission(this.getServer(), var1)) {
       if (var6 > -1) {
-        List var14 = EntitySelector.matchEntities(var1, var3[var6], Entity.class);
+        List<Entity> var14 = EntitySelector.matchEntities(var1, var3[var6], Entity.class); // BCMP
         String var9 = var3[var6];
         var1.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, var14.size());
 
diff --git a/net/minecraft/command/CommandStats.java b/net/minecraft/command/CommandStats.java
index 26740e6..46b2ab9 100644
--- a/net/minecraft/command/CommandStats.java
+++ b/net/minecraft/command/CommandStats.java
@@ -176,7 +176,7 @@ public class CommandStats extends CommandBase {
   }
 
   protected List<String> getObjectiveNames(MinecraftServer var1) {
-    Collection var2 = var1.worldServerForDimension(0).getScoreboard().getScoreObjectives();
+    Collection<ScoreObjective> var2 = var1.worldServerForDimension(0).getScoreboard().getScoreObjectives(); // BCMP
     ArrayList var3 = Lists.newArrayList();
 
     for (ScoreObjective var5 : var2) {
diff --git a/net/minecraft/command/EntitySelector.java b/net/minecraft/command/EntitySelector.java
index 00a8818..7a64be9 100644
--- a/net/minecraft/command/EntitySelector.java
+++ b/net/minecraft/command/EntitySelector.java
@@ -62,7 +62,7 @@ public class EntitySelector {
 
   @Nullable
   public static ITextComponent matchEntitiesToTextComponent(ICommandSender var0, String var1) {
-    List var2 = matchEntities(var0, var1, Entity.class);
+    List<Entity> var2 = matchEntities(var0, var1, Entity.class); // BCMP
     if (var2.isEmpty()) {
       return null;
     } else {
@@ -87,7 +87,7 @@ public class EntitySelector {
         String var5 = var3.group(1);
         BlockPos var6 = getBlockPosFromArguments(var4, var0.getPosition());
         Vec3d var7 = getPosFromArguments(var4, var0.getPositionVector());
-        List var8 = getWorlds(var0, var4);
+        List<World> var8 = getWorlds(var0, var4); // BCMP
         ArrayList var9 = Lists.newArrayList();
 
         for (World var11 : var8) {
@@ -141,11 +141,14 @@ public class EntitySelector {
 
   private static List<Predicate<Entity>> getTypePredicates(Map<String, String> var0, String var1) {
     ArrayList var2 = Lists.newArrayList();
-    final String var3 = getArgument(var0, "type");
-    final boolean var4 = var3 != null && var3.startsWith("!");
+    // BCMP start
+    String var3_ = getArgument(var0, "type");
+    final boolean var4 = var3_ != null && var3_.startsWith("!");
     if (var4) {
-      var3 = var3.substring(1);
+      var3_ = var3_.substring(1);
     }
+    final String var3 = var3_;
+    // BCMP end
 
     boolean var6 = !var1.equals("e");
     boolean var7 = var1.equals("r") && var3 != null;
@@ -204,13 +207,19 @@ public class EntitySelector {
       }
 
       final GameType var4;
+      // BCMP Start
+      GameType tmp;
+
       try {
         int var5 = Integer.parseInt(var2);
-        var4 = GameType.parseGameTypeWithDefault(var5, GameType.NOT_SET);
+        tmp = GameType.parseGameTypeWithDefault(var5, GameType.NOT_SET);
       } catch (Throwable var6) {
-        var4 = GameType.parseGameTypeWithDefault(var2, GameType.NOT_SET);
+        tmp = GameType.parseGameTypeWithDefault(var2, GameType.NOT_SET);
       }
 
+      var4 = tmp;
+      // BCMP End
+
       var1.add(
           new Predicate<Entity>() {
             public boolean apply(@Nullable Entity var1) {
@@ -229,11 +238,14 @@ public class EntitySelector {
 
   private static List<Predicate<Entity>> getTeamPredicates(Map<String, String> var0) {
     ArrayList var1 = Lists.newArrayList();
-    final String var2 = getArgument(var0, "team");
-    final boolean var3 = var2 != null && var2.startsWith("!");
+    // BCMP start
+    String var2_ = getArgument(var0, "team");
+    final boolean var3 = var2_ != null && var2_.startsWith("!");
     if (var3) {
-      var2 = var2.substring(1);
+      var2_ = var2_.substring(1);
     }
+    final String var2 = var2_;
+    // BCMP end
 
     if (var2 != null) {
       var1.add(
@@ -256,7 +268,7 @@ public class EntitySelector {
 
   private static List<Predicate<Entity>> getScorePredicates(
       final ICommandSender var0, Map<String, String> var1) {
-    final Map var2 = getScoreMap(var1);
+    final Map<?, ?> var2 = getScoreMap(var1); // BCMP - I can't believe this worked.
     return (List<Predicate<Entity>>)
         (var2.isEmpty()
             ? Collections.emptyList()
@@ -311,11 +323,14 @@ public class EntitySelector {
 
   private static List<Predicate<Entity>> getNamePredicates(Map<String, String> var0) {
     ArrayList var1 = Lists.newArrayList();
-    final String var2 = getArgument(var0, "name");
-    final boolean var3 = var2 != null && var2.startsWith("!");
+    // BCMP start
+    String var2_ = getArgument(var0, "name");
+    final boolean var3 = var2_ != null && var2_.startsWith("!");
     if (var3) {
-      var2 = var2.substring(1);
+      var2_ = var2_.substring(1);
     }
+    final String var2 = var2_;
+    // BCMP end
 
     if (var2 != null) {
       var1.add(
@@ -331,11 +346,14 @@ public class EntitySelector {
 
   private static List<Predicate<Entity>> getTagPredicates(Map<String, String> var0) {
     ArrayList var1 = Lists.newArrayList();
-    final String var2 = getArgument(var0, "tag");
-    final boolean var3 = var2 != null && var2.startsWith("!");
+    // BCMP start
+    String var2_ = getArgument(var0, "tag");
+    final boolean var3 = var2_ != null && var2_.startsWith("!");
     if (var3) {
-      var2 = var2.substring(1);
+      var2_ = var2_.substring(1);
     }
+    final String var2 = var2_;
+    // BCMP end
 
     if (var2 != null) {
       var1.add(
@@ -514,7 +532,7 @@ public class EntitySelector {
         && var6 == 1
         && ((List) var0).contains(var7)
         && !"r".equals(var4)) {
-      var0 = Lists.newArrayList(new Entity[] {var7});
+      var0 = Lists.newArrayList((T[]) new Entity[] {var7}); // BCMP
     }
 
     if (var6 != 0) {
diff --git a/net/minecraft/command/EntitySelector.java.rej b/net/minecraft/command/EntitySelector.java.rej
new file mode 100644
index 0000000..442b6bc
--- /dev/null
+++ b/net/minecraft/command/EntitySelector.java.rej
@@ -0,0 +1,23 @@
+diff a/net/minecraft/command/EntitySelector.java b/net/minecraft/command/EntitySelector.java	(rejected hunks)
+@@ -203,15 +206,18 @@ public class EntitySelector {
+         var2 = var2.substring(1);
+       }
+ 
+-      final WorldSettings.GameType var4;
++      // BCMP start
++      WorldSettings.GameType var4_;
+       try {
+         int var5 = Integer.parseInt(var2);
+-        var4 =
++        var4_ =
+             WorldSettings.GameType.parseGameTypeWithDefault(var5, WorldSettings.GameType.NOT_SET);
+       } catch (Throwable var6) {
+-        var4 =
++        var4_ =
+             WorldSettings.GameType.parseGameTypeWithDefault(var2, WorldSettings.GameType.NOT_SET);
+       }
++      final WorldSettings.GameType var4 = var4_;
++      // BCMP end
+ 
+       var1.add(
+           new Predicate<Entity>() {
diff --git a/net/minecraft/command/server/CommandAchievement.java b/net/minecraft/command/server/CommandAchievement.java
index 8aba6bf..da429d0 100644
--- a/net/minecraft/command/server/CommandAchievement.java
+++ b/net/minecraft/command/server/CommandAchievement.java
@@ -77,7 +77,7 @@ public class CommandAchievement extends CommandBase {
                       new Object[] {var5.getName(), var4.createChatComponent()});
                 }
 
-                ArrayList var9;
+                ArrayList<Achievement> var9; // BCMP
                 for (var9 = Lists.newArrayList();
                     var8.parentAchievement != null
                         && !var5.getStatFile().hasAchievementUnlocked(var8.parentAchievement);
@@ -95,7 +95,7 @@ public class CommandAchievement extends CommandBase {
                       new Object[] {var5.getName(), var4.createChatComponent()});
                 }
 
-                ArrayList var17 =
+                ArrayList<Achievement> var17 = // BCMP
                     Lists.newArrayList(
                         Iterators.filter(
                             AchievementList.ACHIEVEMENTS.iterator(),
@@ -105,7 +105,7 @@ public class CommandAchievement extends CommandBase {
                                     && var1 != var4;
                               }
                             }));
-                ArrayList var20 = Lists.newArrayList(var17);
+                ArrayList<Achievement> var20 = Lists.newArrayList(var17); // BCMP
 
                 for (Achievement var12 : var17) {
                   Achievement var13 = var12;
diff --git a/net/minecraft/command/server/CommandBanIp.java b/net/minecraft/command/server/CommandBanIp.java
index ab714d5..bea2c4c 100644
--- a/net/minecraft/command/server/CommandBanIp.java
+++ b/net/minecraft/command/server/CommandBanIp.java
@@ -71,7 +71,7 @@ public class CommandBanIp extends CommandBase {
     UserListIPBansEntry var5 =
         new UserListIPBansEntry(var3, (Date) null, var2.getName(), (Date) null, var4);
     var1.getPlayerList().getBannedIPs().addEntry(var5);
-    List var6 = var1.getPlayerList().getPlayersMatchingAddress(var3);
+    List<EntityPlayerMP> var6 = var1.getPlayerList().getPlayersMatchingAddress(var3); // BCMP
     String[] var7 = new String[var6.size()];
     int var8 = 0;
 
diff --git a/net/minecraft/command/server/CommandScoreboard.java b/net/minecraft/command/server/CommandScoreboard.java
index 21850e9..a242820 100644
--- a/net/minecraft/command/server/CommandScoreboard.java
+++ b/net/minecraft/command/server/CommandScoreboard.java
@@ -237,7 +237,7 @@ public class CommandScoreboard extends CommandBase {
     if (var4 < 0) {
       return false;
     } else {
-      ArrayList var13 = Lists.newArrayList(this.getScoreboard(var1).getObjectiveNames());
+      ArrayList<String> var13 = Lists.newArrayList(this.getScoreboard(var1).getObjectiveNames()); // BCMP
       String var6 = var3[var4];
       ArrayList var7 = Lists.newArrayList();
 
@@ -522,7 +522,7 @@ public class CommandScoreboard extends CommandBase {
       var1.addChatMessage(var8);
       var1.addChatMessage(new TextComponentString(joinNiceString(var7.toArray())));
     } else {
-      Collection var10 = var5.getTeams();
+      Collection<ScorePlayerTeam> var10 = var5.getTeams(); // BCMP
       var1.setCommandStat(CommandResultStats.Type.QUERY_RESULT, var10.size());
       if (var10.isEmpty()) {
         throw new CommandException("commands.scoreboard.teams.list.empty", new Object[0]);
@@ -667,7 +667,7 @@ public class CommandScoreboard extends CommandBase {
     Scoreboard var5 = this.getScoreboard(var4);
     ScorePlayerTeam var6 = this.convertToTeam(var2[var3], var4);
     if (var6 != null) {
-      ArrayList var7 = Lists.newArrayList(var6.getMembershipCollection());
+      ArrayList<String> var7 = Lists.newArrayList(var6.getMembershipCollection()); // BCMP
       var1.setCommandStat(CommandResultStats.Type.AFFECTED_ENTITIES, var7.size());
       if (var7.isEmpty()) {
         throw new CommandException(
@@ -698,7 +698,7 @@ public class CommandScoreboard extends CommandBase {
 
   protected void listObjectives(ICommandSender var1, MinecraftServer var2) throws CommandException {
     Scoreboard var3 = this.getScoreboard(var2);
-    Collection var4 = var3.getScoreObjectives();
+    Collection<ScoreObjective> var4 = var3.getScoreObjectives(); // BCMP
     if (var4.isEmpty()) {
       throw new CommandException("commands.scoreboard.objectives.list.empty", new Object[0]);
     } else {
@@ -756,7 +756,7 @@ public class CommandScoreboard extends CommandBase {
     Scoreboard var5 = this.getScoreboard(var4);
     if (var2.length > var3) {
       String var6 = getEntityName(var4, var1, var2[var3]);
-      Map var7 = var5.getObjectivesForEntity(var6);
+      Map<?, Score> var7 = var5.getObjectivesForEntity(var6); // BCMP
       var1.setCommandStat(CommandResultStats.Type.QUERY_RESULT, var7.size());
       if (var7.isEmpty()) {
         throw new CommandException(
@@ -1222,7 +1222,7 @@ public class CommandScoreboard extends CommandBase {
   }
 
   protected List<String> getObjectiveNames(boolean var1, MinecraftServer var2) {
-    Collection var3 = this.getScoreboard(var2).getScoreObjectives();
+    Collection<ScoreObjective> var3 = this.getScoreboard(var2).getScoreObjectives(); // BCMP
     ArrayList var4 = Lists.newArrayList();
 
     for (ScoreObjective var6 : var3) {
@@ -1235,7 +1235,7 @@ public class CommandScoreboard extends CommandBase {
   }
 
   protected List<String> getTriggerNames(MinecraftServer var1) {
-    Collection var2 = this.getScoreboard(var1).getScoreObjectives();
+    Collection<ScoreObjective> var2 = this.getScoreboard(var1).getScoreObjectives(); // BCMP
     ArrayList var3 = Lists.newArrayList();
 
     for (ScoreObjective var5 : var2) {
diff --git a/net/minecraft/crash/CrashReport.java b/net/minecraft/crash/CrashReport.java
index 9c1f0e2..db0ca1c 100644
--- a/net/minecraft/crash/CrashReport.java
+++ b/net/minecraft/crash/CrashReport.java
@@ -103,7 +103,7 @@ public class CrashReport {
         new ICrashReportDetail<String>() {
           public String call() {
             RuntimeMXBean var1 = ManagementFactory.getRuntimeMXBean();
-            List var2 = var1.getInputArguments();
+            List<String> var2 = var1.getInputArguments(); // BCMP
             int var3 = 0;
             StringBuilder var4 = new StringBuilder();
 
diff --git a/net/minecraft/enchantment/EnchantmentHelper.java b/net/minecraft/enchantment/EnchantmentHelper.java
index 4b782d9..6167dec 100644
--- a/net/minecraft/enchantment/EnchantmentHelper.java
+++ b/net/minecraft/enchantment/EnchantmentHelper.java
@@ -165,7 +165,7 @@ public class EnchantmentHelper {
   }
 
   public static int getMaxEnchantmentLevel(Enchantment var0, EntityLivingBase var1) {
-    Iterable var2 = var0.getEntityEquipment(var1);
+    Iterable<ItemStack> var2 = var0.getEntityEquipment(var1); // BCMP
     if (var2 == null) {
       return 0;
     } else {
@@ -224,7 +224,7 @@ public class EnchantmentHelper {
 
   @Nullable
   public static ItemStack getEnchantedItem(Enchantment var0, EntityLivingBase var1) {
-    Iterable var2 = var0.getEntityEquipment(var1);
+    Iterable<ItemStack> var2 = var0.getEntityEquipment(var1); // BCMP
     if (var2 == null) {
       return null;
     } else {
@@ -260,7 +260,7 @@ public class EnchantmentHelper {
   public static ItemStack addRandomEnchantment(
       Random var0, ItemStack var1, int var2, boolean var3) {
     boolean var4 = var1.getItem() == Items.BOOK;
-    List var5 = buildEnchantmentList(var0, var1, var2, var3);
+    List<EnchantmentData> var5 = buildEnchantmentList(var0, var1, var2, var3); // BCMP
     if (var4) {
       var1.setItem(Items.ENCHANTED_BOOK);
     }
diff --git a/net/minecraft/entity/Entity.java b/net/minecraft/entity/Entity.java
index 290cbf0..ac12345 100644
--- a/net/minecraft/entity/Entity.java
+++ b/net/minecraft/entity/Entity.java
@@ -524,7 +524,7 @@ public abstract class Entity implements ICommandSender {
       }
 
       this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, var3, 0.0D));
-      var22 = this.onGround || var15 != var3 && var15 < 0.0D;
+      boolean var22_ = this.onGround || var15 != var3 && var15 < 0.0D; // BCMP
       int var56 = 0;
 
       for (int var24 = var54.size(); var56 < var24; ++var56) {
@@ -541,7 +541,7 @@ public abstract class Entity implements ICommandSender {
       }
 
       this.setEntityBoundingBox(this.getEntityBoundingBox().offset(0.0D, 0.0D, var5));
-      if (this.stepHeight > 0.0F && var22 && (var13 != var1 || var17 != var5)) {
+      if (this.stepHeight > 0.0F && var22_ && (var13 != var1 || var17 != var5)) { // BCMP
         double var58 = var1;
         double var25 = var3;
         double var27 = var5;
@@ -2283,7 +2283,7 @@ public abstract class Entity implements ICommandSender {
   private <T extends Entity> void getRecursivePassengersByType(Class<T> var1, Set<T> var2) {
     for (Entity var4 : this.getPassengers()) {
       if (var1.isAssignableFrom(var4.getClass())) {
-        var2.add(var4);
+        var2.add((T) var4); // BCMP
       }
 
       var4.getRecursivePassengersByType(var1, var2);
diff --git a/net/minecraft/entity/EntityAreaEffectCloud.java b/net/minecraft/entity/EntityAreaEffectCloud.java
index 8d00ecf..283aa22 100644
--- a/net/minecraft/entity/EntityAreaEffectCloud.java
+++ b/net/minecraft/entity/EntityAreaEffectCloud.java
@@ -293,7 +293,7 @@ public class EntityAreaEffectCloud extends Entity {
           }
         }
 
-        ArrayList var18 = Lists.newArrayList();
+        ArrayList<PotionEffect> var18 = Lists.newArrayList(); // BCMP
 
         for (PotionEffect var24 : this.potion.getEffects()) {
           var18.add(
@@ -309,7 +309,7 @@ public class EntityAreaEffectCloud extends Entity {
         if (var18.isEmpty()) {
           this.reapplicationDelayMap.clear();
         } else {
-          List var22 =
+          List<EntityLivingBase> var22 = // BCMP
               this.worldObj.getEntitiesWithinAABB(
                   EntityLivingBase.class, this.getEntityBoundingBox());
           if (!var22.isEmpty()) {
diff --git a/net/minecraft/entity/EntityAreaEffectCloud.java.rej b/net/minecraft/entity/EntityAreaEffectCloud.java.rej
new file mode 100644
index 0000000..4be8323
--- /dev/null
+++ b/net/minecraft/entity/EntityAreaEffectCloud.java.rej
@@ -0,0 +1,19 @@
+diff a/net/minecraft/entity/EntityAreaEffectCloud.java b/net/minecraft/entity/EntityAreaEffectCloud.java	(rejected hunks)
+@@ -265,7 +265,7 @@ public class EntityAreaEffectCloud extends Entity {
+           }
+         }
+ 
+-        ArrayList var19 = Lists.newArrayList();
++        ArrayList<PotionEffect> var19 = Lists.newArrayList(); // BCMP
+ 
+         for (PotionEffect var25 : this.potion.getEffects()) {
+           var19.add(
+@@ -281,7 +281,7 @@ public class EntityAreaEffectCloud extends Entity {
+         if (var19.isEmpty()) {
+           this.reapplicationDelayMap.clear();
+         } else {
+-          List var23 =
++          List<EntityLivingBase> var23 = // BCMP
+               this.worldObj.getEntitiesWithinAABB(
+                   EntityLivingBase.class, this.getEntityBoundingBox());
+           if (!var23.isEmpty()) {
diff --git a/net/minecraft/entity/EntityList.java b/net/minecraft/entity/EntityList.java
index 2314029..fa98290 100644
--- a/net/minecraft/entity/EntityList.java
+++ b/net/minecraft/entity/EntityList.java
@@ -214,7 +214,7 @@ public class EntityList {
   public static void init() {}
 
   public static List<String> getEntityNameList() {
-    Set var0 = NAME_TO_CLASS.keySet();
+    Set<String> var0 = NAME_TO_CLASS.keySet(); // BCMP
     ArrayList var1 = Lists.newArrayList();
 
     for (String var3 : var0) {
diff --git a/net/minecraft/entity/EntityTracker.java b/net/minecraft/entity/EntityTracker.java
index 35df284..d0f9c3a 100644
--- a/net/minecraft/entity/EntityTracker.java
+++ b/net/minecraft/entity/EntityTracker.java
@@ -251,8 +251,8 @@ public class EntityTracker {
   }
 
   public void sendLeashedEntitiesInChunk(EntityPlayerMP var1, Chunk var2) {
-    ArrayList var3 = Lists.newArrayList();
-    ArrayList var4 = Lists.newArrayList();
+    ArrayList<Entity> var3 = Lists.newArrayList(); // BCMP
+    ArrayList<Entity> var4 = Lists.newArrayList(); // BCMP
 
     for (EntityTrackerEntry var6 : this.trackedEntities) {
       Entity var7 = var6.getTrackedEntity();
diff --git a/net/minecraft/entity/SharedMonsterAttributes.java b/net/minecraft/entity/SharedMonsterAttributes.java
index 07667ec..6bd64e5 100644
--- a/net/minecraft/entity/SharedMonsterAttributes.java
+++ b/net/minecraft/entity/SharedMonsterAttributes.java
@@ -60,7 +60,7 @@ public class SharedMonsterAttributes {
     IAttribute var2 = var0.getAttribute();
     var1.setString("Name", var2.getAttributeUnlocalizedName());
     var1.setDouble("Base", var0.getBaseValue());
-    Collection var3 = var0.getModifiers();
+    Collection<AttributeModifier> var3 = var0.getModifiers(); // BCMP
     if (var3 != null && !var3.isEmpty()) {
       NBTTagList var4 = new NBTTagList();
 
diff --git a/net/minecraft/entity/ai/EntityAIAvoidEntity.java b/net/minecraft/entity/ai/EntityAIAvoidEntity.java
index 35526d8..0e7415c 100644
--- a/net/minecraft/entity/ai/EntityAIAvoidEntity.java
+++ b/net/minecraft/entity/ai/EntityAIAvoidEntity.java
@@ -55,7 +55,7 @@ public class EntityAIAvoidEntity<T extends Entity> extends EntityAIBase {
   }
 
   public boolean shouldExecute() {
-    List var1 =
+    List<T> var1 = // BCMP
         this.theEntity.worldObj.getEntitiesWithinAABB(
             this.classToAvoid,
             this.theEntity
@@ -68,7 +68,7 @@ public class EntityAIAvoidEntity<T extends Entity> extends EntityAIBase {
     if (var1.isEmpty()) {
       return false;
     } else {
-      this.closestLivingEntity = (Entity) var1.get(0);
+      this.closestLivingEntity = var1.get(0); // BCMP
       Vec3d var2 =
           RandomPositionGenerator.findRandomTargetBlockAwayFrom(
               this.theEntity,
diff --git a/net/minecraft/entity/ai/EntityAIFollowGolem.java b/net/minecraft/entity/ai/EntityAIFollowGolem.java
index 985d5b1..50e8fc0 100644
--- a/net/minecraft/entity/ai/EntityAIFollowGolem.java
+++ b/net/minecraft/entity/ai/EntityAIFollowGolem.java
@@ -22,7 +22,7 @@ public class EntityAIFollowGolem extends EntityAIBase {
     } else if (!this.theVillager.worldObj.isDaytime()) {
       return false;
     } else {
-      List var1 =
+      List<EntityIronGolem> var1 = // BCMP
           this.theVillager.worldObj.getEntitiesWithinAABB(
               EntityIronGolem.class,
               this.theVillager.getEntityBoundingBox().expand(6.0D, 2.0D, 6.0D));
diff --git a/net/minecraft/entity/ai/EntityAIFollowParent.java b/net/minecraft/entity/ai/EntityAIFollowParent.java
index 73dc3ff..519e2c4 100644
--- a/net/minecraft/entity/ai/EntityAIFollowParent.java
+++ b/net/minecraft/entity/ai/EntityAIFollowParent.java
@@ -19,7 +19,7 @@ public class EntityAIFollowParent extends EntityAIBase {
     if (this.childAnimal.getGrowingAge() >= 0) {
       return false;
     } else {
-      List var1 =
+      List<EntityAnimal> var1 = // BCMP
           this.childAnimal.worldObj.getEntitiesWithinAABB(
               this.childAnimal.getClass(),
               this.childAnimal.getEntityBoundingBox().expand(8.0D, 4.0D, 8.0D));
diff --git a/net/minecraft/entity/ai/EntityAIMate.java b/net/minecraft/entity/ai/EntityAIMate.java
index da761a8..a86e592 100644
--- a/net/minecraft/entity/ai/EntityAIMate.java
+++ b/net/minecraft/entity/ai/EntityAIMate.java
@@ -59,8 +59,8 @@ public class EntityAIMate extends EntityAIBase {
     }
   }
 
-  private EntityAnimal getNearbyMate() {
-    List var1 =
+  private EntityAnimal getNearbyMate() { // Cruisin' for chicks!
+    List<EntityAnimal> var1 = // BCMP
         this.theWorld.getEntitiesWithinAABB(
             this.theAnimal.getClass(), this.theAnimal.getEntityBoundingBox().expandXyz(8.0D));
     double var2 = Double.MAX_VALUE;
diff --git a/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java b/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
index 244fb32..0e605dc 100644
--- a/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
+++ b/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java
@@ -68,7 +68,7 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
     if (this.targetChance > 0 && this.taskOwner.getRNG().nextInt(this.targetChance) != 0) {
       return false;
     } else if (this.targetClass != EntityPlayer.class && this.targetClass != EntityPlayerMP.class) {
-      List var1 =
+      List<T> var1 = // BCMP
           this.taskOwner.worldObj.getEntitiesWithinAABB(
               this.targetClass,
               this.getTargetableArea(this.getTargetDistance()),
@@ -77,12 +77,12 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
         return false;
       } else {
         Collections.sort(var1, this.theNearestAttackableTargetSorter);
-        this.targetEntity = (EntityLivingBase) var1.get(0);
+        this.targetEntity = var1.get(0); // BCMP
         return true;
       }
     } else {
       this.targetEntity =
-          this.taskOwner.worldObj.getNearestAttackablePlayer(
+              (T) this.taskOwner.worldObj.getNearestAttackablePlayer( // BCMP
               this.taskOwner.posX,
               this.taskOwner.posY + (double) this.taskOwner.getEyeHeight(),
               this.taskOwner.posZ,
@@ -114,7 +114,7 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
                   return Double.valueOf(1.0D);
                 }
               },
-              this.targetEntitySelector);
+                      (Predicate<EntityPlayer>) this.targetEntitySelector); // BCMP
       return this.targetEntity != null;
     }
   }
diff --git a/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java.rej b/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java.rej
new file mode 100644
index 0000000..2789323
--- /dev/null
+++ b/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java.rej
@@ -0,0 +1,79 @@
+diff a/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java b/net/minecraft/entity/ai/EntityAINearestAttackableTarget.java	(rejected hunks)
+@@ -76,44 +76,44 @@ public class EntityAINearestAttackableTarget<T extends EntityLivingBase> extends
+         return false;
+       } else {
+         Collections.sort(var1, this.theNearestAttackableTargetSorter);
+-        this.targetEntity = (EntityLivingBase) var1.get(0);
++        this.targetEntity = (T) var1.get(0); // BCMP
+         return true;
+       }
+     } else {
+       this.targetEntity =
+-          this.taskOwner.worldObj.getNearestAttackablePlayer(
+-              this.taskOwner.posX,
+-              this.taskOwner.posY + (double) this.taskOwner.getEyeHeight(),
+-              this.taskOwner.posZ,
+-              this.getTargetDistance(),
+-              this.getTargetDistance(),
+-              new Function<EntityPlayer, Double>() {
+-                @Nullable
+-                public Double apply(@Nullable EntityPlayer var1) {
+-                  ItemStack var2 = var1.getItemStackFromSlot(EntityEquipmentSlot.HEAD);
+-                  if (var2 != null && var2.getItem() == Items.SKULL) {
+-                    int var3 = var2.getItemDamage();
+-                    boolean var4 =
+-                        EntityAINearestAttackableTarget.this.taskOwner instanceof EntitySkeleton
+-                            && ((EntitySkeleton) EntityAINearestAttackableTarget.this.taskOwner)
+-                                    .getSkeletonType()
+-                                == 0
+-                            && var3 == 0;
+-                    boolean var5 =
+-                        EntityAINearestAttackableTarget.this.taskOwner instanceof EntityZombie
+-                            && var3 == 2;
+-                    boolean var6 =
+-                        EntityAINearestAttackableTarget.this.taskOwner instanceof EntityCreeper
+-                            && var3 == 4;
+-                    if (var4 || var5 || var6) {
+-                      return Double.valueOf(0.5D);
+-                    }
+-                  }
++              (T) this.taskOwner.worldObj.getNearestAttackablePlayer( // BCMP
++                  this.taskOwner.posX,
++                  this.taskOwner.posY + (double) this.taskOwner.getEyeHeight(),
++                  this.taskOwner.posZ,
++                  this.getTargetDistance(),
++                  this.getTargetDistance(),
++                  new Function<EntityPlayer, Double>() {
++                    @Nullable
++                    public Double apply(@Nullable EntityPlayer var1) {
++                      ItemStack var2 = var1.getItemStackFromSlot(EntityEquipmentSlot.HEAD);
++                      if (var2 != null && var2.getItem() == Items.SKULL) {
++                        int var3 = var2.getItemDamage();
++                        boolean var4 =
++                            EntityAINearestAttackableTarget.this.taskOwner instanceof EntitySkeleton
++                                && ((EntitySkeleton) EntityAINearestAttackableTarget.this.taskOwner)
++                                        .getSkeletonType()
++                                    == 0
++                                && var3 == 0;
++                        boolean var5 =
++                            EntityAINearestAttackableTarget.this.taskOwner instanceof EntityZombie
++                                && var3 == 2;
++                        boolean var6 =
++                            EntityAINearestAttackableTarget.this.taskOwner instanceof EntityCreeper
++                                && var3 == 4;
++                        if (var4 || var5 || var6) {
++                          return Double.valueOf(0.5D);
++                        }
++                      }
+ 
+-                  return Double.valueOf(1.0D);
+-                }
+-              },
+-              this.targetEntitySelector);
++                      return Double.valueOf(1.0D);
++                    }
++                  },
++                      (Predicate<EntityPlayer>) this.targetEntitySelector); // BCMP
+       return this.targetEntity != null;
+     }
+   }
diff --git a/net/minecraft/entity/ai/EntityAIPlay.java b/net/minecraft/entity/ai/EntityAIPlay.java
index c67f218..e51a6e2 100644
--- a/net/minecraft/entity/ai/EntityAIPlay.java
+++ b/net/minecraft/entity/ai/EntityAIPlay.java
@@ -25,7 +25,7 @@ public class EntityAIPlay extends EntityAIBase {
     } else if (this.villagerObj.getRNG().nextInt(400) != 0) {
       return false;
     } else {
-      List var1 =
+      List<EntityVillager> var1 = // BCMP
           this.villagerObj.worldObj.getEntitiesWithinAABB(
               EntityVillager.class,
               this.villagerObj.getEntityBoundingBox().expand(6.0D, 3.0D, 6.0D));
diff --git a/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java b/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
index 9d1ecc1..1d0c6e8 100644
--- a/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
+++ b/net/minecraft/entity/ai/attributes/ModifiableAttributeInstance.java
@@ -75,7 +75,7 @@ public class ModifiableAttributeInstance implements IAttributeInstance {
     if (this.getModifier(var1.getID()) != null) {
       throw new IllegalArgumentException("Modifier is already applied on this attribute!");
     } else {
-      Object var2 = (Set) this.mapByName.get(var1.getName());
+      Set<AttributeModifier> var2 = (Set) this.mapByName.get(var1.getName()); // BCMP
       if (var2 == null) {
         var2 = Sets.newHashSet();
         this.mapByName.put(var1.getName(), var2);
diff --git a/net/minecraft/entity/boss/EntityDragon.java b/net/minecraft/entity/boss/EntityDragon.java
index 29204e2..a01ac4d 100644
--- a/net/minecraft/entity/boss/EntityDragon.java
+++ b/net/minecraft/entity/boss/EntityDragon.java
@@ -461,7 +461,7 @@ public class EntityDragon extends EntityLiving implements IEntityMultiPart, IMob
     }
 
     if (this.rand.nextInt(10) == 0) {
-      List var1 =
+      List<EntityEnderCrystal> var1 = // BCMP
           this.worldObj.getEntitiesWithinAABB(
               EntityEnderCrystal.class, this.getEntityBoundingBox().expandXyz(32.0D));
       EntityEnderCrystal var2 = null;
diff --git a/net/minecraft/entity/item/EntityFallingBlock.java b/net/minecraft/entity/item/EntityFallingBlock.java
index 30ef5df..e7a71cd 100644
--- a/net/minecraft/entity/item/EntityFallingBlock.java
+++ b/net/minecraft/entity/item/EntityFallingBlock.java
@@ -167,7 +167,7 @@ public class EntityFallingBlock extends Entity {
     if (this.hurtEntities) {
       int var4 = MathHelper.ceiling_float_int(var1 - 1.0F);
       if (var4 > 0) {
-        ArrayList var5 =
+        ArrayList<Entity> var5 = // BCMP
             Lists.newArrayList(
                 this.worldObj.getEntitiesWithinAABBExcludingEntity(
                     this, this.getEntityBoundingBox()));
diff --git a/net/minecraft/entity/monster/EntityPolarBear.java b/net/minecraft/entity/monster/EntityPolarBear.java
index 5c90e3c..099a1ab 100644
--- a/net/minecraft/entity/monster/EntityPolarBear.java
+++ b/net/minecraft/entity/monster/EntityPolarBear.java
@@ -179,7 +179,7 @@ public class EntityPolarBear extends EntityAnimal {
 
   class AIAttackPlayer extends EntityAINearestAttackableTarget<EntityPlayer> {
     public AIAttackPlayer() {
-      super(EntityPolarBear.this, EntityPlayer.class, 20, true, true, (Predicate<? super T>) null);
+      super(EntityPolarBear.this, EntityPlayer.class, 20, true, true, null); // BCMP
     }
 
     public boolean shouldExecute() {
diff --git a/net/minecraft/entity/monster/EntityShulker.java b/net/minecraft/entity/monster/EntityShulker.java
index 42937bb..046ee6e 100644
--- a/net/minecraft/entity/monster/EntityShulker.java
+++ b/net/minecraft/entity/monster/EntityShulker.java
@@ -330,7 +330,7 @@ public class EntityShulker extends EntityGolem implements IMob {
       }
 
       if (var27 > 0.0D) {
-        List var16 =
+        List<Entity> var16 = // BCMP
             this.worldObj.getEntitiesWithinAABBExcludingEntity(this, this.getEntityBoundingBox());
         if (!var16.isEmpty()) {
           for (Entity var18 : var16) {
diff --git a/net/minecraft/entity/monster/EntitySkeleton.java b/net/minecraft/entity/monster/EntitySkeleton.java
index b900782..893346e 100644
--- a/net/minecraft/entity/monster/EntitySkeleton.java
+++ b/net/minecraft/entity/monster/EntitySkeleton.java
@@ -67,7 +67,7 @@ public class EntitySkeleton extends EntityMob implements IRangedAttackMob {
   private final EntityAIAttackRangedBow aiArrowAttack =
       new EntityAIAttackRangedBow(this, 1.0D, 20, 15.0F);
   private final EntityAIAttackMelee aiAttackOnCollide =
-      new EntityAIAttackMelee(this, 1.2D, var5) {
+      new EntityAIAttackMelee(this, 1.2D, false) { // BCMP
         public void resetTask() {
           super.resetTask();
           EntitySkeleton.this.setSwingingArms(false);
diff --git a/net/minecraft/entity/monster/EntityWitch.java b/net/minecraft/entity/monster/EntityWitch.java
index e1f695b..45f571c 100644
--- a/net/minecraft/entity/monster/EntityWitch.java
+++ b/net/minecraft/entity/monster/EntityWitch.java
@@ -107,7 +107,7 @@ public class EntityWitch extends EntityMob implements IRangedAttackMob {
           ItemStack var5 = this.getHeldItemMainhand();
           this.setItemStackToSlot(EntityEquipmentSlot.MAINHAND, (ItemStack) null);
           if (var5 != null && var5.getItem() == Items.POTIONITEM) {
-            List var6 = PotionUtils.getEffectsFromStack(var5);
+            List<PotionEffect> var6 = PotionUtils.getEffectsFromStack(var5); // BCMP
             if (var6 != null) {
               for (PotionEffect var4 : var6) {
                 this.addPotionEffect(new PotionEffect(var4));
diff --git a/net/minecraft/entity/player/EntityPlayer.java b/net/minecraft/entity/player/EntityPlayer.java
index 62c3f88..8d63f55 100644
--- a/net/minecraft/entity/player/EntityPlayer.java
+++ b/net/minecraft/entity/player/EntityPlayer.java
@@ -523,7 +523,7 @@ public abstract class EntityPlayer extends EntityLivingBase {
   public void addToPlayerScore(Entity var1, int var2) {
     if (var1 != this) {
       this.addScore(var2);
-      Collection var3 =
+      Collection<ScoreObjective> var3 = // BCMP
           this.getWorldScoreboard().getObjectivesFromCriteria(IScoreCriteria.TOTAL_KILL_COUNT);
       if (var1 instanceof EntityPlayer) {
         this.addStat(StatList.PLAYER_KILLS);
diff --git a/net/minecraft/entity/projectile/EntityDragonFireball.java b/net/minecraft/entity/projectile/EntityDragonFireball.java
index aa8a3c2..a419aff 100644
--- a/net/minecraft/entity/projectile/EntityDragonFireball.java
+++ b/net/minecraft/entity/projectile/EntityDragonFireball.java
@@ -31,7 +31,7 @@ public class EntityDragonFireball extends EntityFireball {
 
   protected void onImpact(RayTraceResult var1) {
     if (!this.worldObj.isRemote) {
-      List var2 =
+      List<EntityLivingBase> var2 = // BCMP
           this.worldObj.getEntitiesWithinAABB(
               EntityLivingBase.class, this.getEntityBoundingBox().expand(4.0D, 2.0D, 4.0D));
       EntityAreaEffectCloud var3 =
diff --git a/net/minecraft/entity/projectile/EntityPotion.java b/net/minecraft/entity/projectile/EntityPotion.java
index 73d811b..793a0a4 100644
--- a/net/minecraft/entity/projectile/EntityPotion.java
+++ b/net/minecraft/entity/projectile/EntityPotion.java
@@ -84,7 +84,7 @@ public class EntityPotion extends EntityThrowable {
     if (!this.worldObj.isRemote) {
       ItemStack var2 = this.getPotion();
       PotionType var3 = PotionUtils.getPotionFromItem(var2);
-      List var4 = PotionUtils.getEffectsFromStack(var2);
+      List<PotionEffect> var4 = PotionUtils.getEffectsFromStack(var2); // BCMP
       if (var1.typeOfHit == RayTraceResult.Type.BLOCK
           && var3 == PotionTypes.WATER
           && var4.isEmpty()) {
@@ -117,7 +117,7 @@ public class EntityPotion extends EntityThrowable {
             this.worldObj.spawnEntityInWorld(var5);
           } else {
             AxisAlignedBB var17 = this.getEntityBoundingBox().expand(4.0D, 2.0D, 4.0D);
-            List var19 = this.worldObj.getEntitiesWithinAABB(EntityLivingBase.class, var17);
+            List<EntityLivingBase> var19 = this.worldObj.getEntitiesWithinAABB(EntityLivingBase.class, var17); // BCMP
             if (!var19.isEmpty()) {
               for (EntityLivingBase var8 : var19) {
                 if (var8.canBeHitWithPotion()) {
diff --git a/net/minecraft/entity/projectile/EntityTippedArrow.java b/net/minecraft/entity/projectile/EntityTippedArrow.java
index 1bfab66..41d4bae 100644
--- a/net/minecraft/entity/projectile/EntityTippedArrow.java
+++ b/net/minecraft/entity/projectile/EntityTippedArrow.java
@@ -42,7 +42,7 @@ public class EntityTippedArrow extends EntityArrow {
   public void setPotionEffect(ItemStack var1) {
     if (var1.getItem() == Items.TIPPED_ARROW) {
       this.potion = PotionUtils.getPotionTypeFromNBT(var1.getTagCompound());
-      List var2 = PotionUtils.getFullEffectsFromItem(var1);
+      List<PotionEffect> var2 = PotionUtils.getFullEffectsFromItem(var1); // BCMP
       if (!var2.isEmpty()) {
         for (PotionEffect var4 : var2) {
           this.customPotionEffects.add(new PotionEffect(var4));
diff --git a/net/minecraft/inventory/Container.java b/net/minecraft/inventory/Container.java
index 6de35db..d8751b1 100644
--- a/net/minecraft/inventory/Container.java
+++ b/net/minecraft/inventory/Container.java
@@ -30,7 +30,7 @@ public abstract class Container {
   protected Slot addSlotToContainer(Slot var1) {
     var1.slotNumber = this.inventorySlots.size();
     this.inventorySlots.add(var1);
-    this.inventoryItemStacks.add((Object) null);
+    this.inventoryItemStacks.add(null); // BCMP
     return var1;
   }
 
diff --git a/net/minecraft/inventory/ContainerRepair.java b/net/minecraft/inventory/ContainerRepair.java
index d1e9e5f..e46d4dc 100644
--- a/net/minecraft/inventory/ContainerRepair.java
+++ b/net/minecraft/inventory/ContainerRepair.java
@@ -130,7 +130,7 @@ public class ContainerRepair extends Container {
     } else {
       ItemStack var5 = var1.copy();
       ItemStack var6 = this.inputSlots.getStackInSlot(1);
-      Map var7 = EnchantmentHelper.getEnchantments(var5);
+      Map<Enchantment, Integer> var7 = EnchantmentHelper.getEnchantments(var5); // BCMP
       var3 = var3 + var1.getRepairCost() + (var6 == null ? 0 : var6.getRepairCost());
       this.materialCost = 0;
       if (var6 != null) {
@@ -177,7 +177,7 @@ public class ContainerRepair extends Container {
             }
           }
 
-          Map var19 = EnchantmentHelper.getEnchantments(var6);
+          Map<Enchantment, Integer> var19 = EnchantmentHelper.getEnchantments(var6); // BCMP
 
           for (Enchantment var23 : var19.keySet()) {
             if (var23 != null) {
diff --git a/net/minecraft/item/ItemSlab.java b/net/minecraft/item/ItemSlab.java
index 02728a2..6681051 100644
--- a/net/minecraft/item/ItemSlab.java
+++ b/net/minecraft/item/ItemSlab.java
@@ -114,6 +114,6 @@ public class ItemSlab extends ItemBlock {
   }
 
   protected <T extends Comparable<T>> IBlockState makeState(IProperty<T> var1, Comparable<?> var2) {
-    return this.doubleSlab.getDefaultState().withProperty(var1, var2);
+    return this.doubleSlab.getDefaultState().withProperty(var1, (T)var2); // BCMP
   }
 }
diff --git a/net/minecraft/item/crafting/ShapelessRecipes.java b/net/minecraft/item/crafting/ShapelessRecipes.java
index 9d36664..d26c263 100644
--- a/net/minecraft/item/crafting/ShapelessRecipes.java
+++ b/net/minecraft/item/crafting/ShapelessRecipes.java
@@ -37,7 +37,7 @@ public class ShapelessRecipes implements IRecipe {
   }
 
   public boolean matches(InventoryCrafting var1, World var2) {
-    ArrayList var3 = Lists.newArrayList(this.recipeItems);
+    ArrayList<ItemStack> var3 = Lists.newArrayList(this.recipeItems); // BCMP
 
     for (int var4 = 0; var4 < var1.getHeight(); ++var4) {
       for (int var5 = 0; var5 < var1.getWidth(); ++var5) {
diff --git a/net/minecraft/nbt/NBTUtil.java b/net/minecraft/nbt/NBTUtil.java
index 73aab1d..5054475 100644
--- a/net/minecraft/nbt/NBTUtil.java
+++ b/net/minecraft/nbt/NBTUtil.java
@@ -197,7 +197,7 @@ public final class NBTUtil {
 
   private static <T extends Comparable<T>> IBlockState func_190007_a(
       IBlockState var0, IProperty<T> var1, String var2) {
-    return var0.withProperty(var1, (Comparable) var1.parseValue(var2).get());
+    return var0.withProperty(var1, var1.parseValue(var2).get()); // BCMP
   }
 
   public static NBTTagCompound func_190009_a(NBTTagCompound var0, IBlockState var1) {
@@ -218,7 +218,7 @@ public final class NBTUtil {
   }
 
   private static <T extends Comparable<T>> String func_190010_a(
-      IProperty<T> var0, Comparable<?> var1) {
+      IProperty<T> var0, T var1) { // BCMP
     return var0.getName(var1);
   }
 }
diff --git a/net/minecraft/network/EnumConnectionState.java b/net/minecraft/network/EnumConnectionState.java
index 451a46f..f3c9bb0 100644
--- a/net/minecraft/network/EnumConnectionState.java
+++ b/net/minecraft/network/EnumConnectionState.java
@@ -271,7 +271,7 @@ public enum EnumConnectionState {
 
   protected EnumConnectionState registerPacket(
       EnumPacketDirection var1, Class<? extends Packet<?>> var2) {
-    Object var3 = (BiMap) this.directionMaps.get(var1);
+    BiMap<Integer, Class<? extends Packet<?>>> var3 = (BiMap) this.directionMaps.get(var1); // BCMP
     if (var3 == null) {
       var3 = HashBiMap.create();
       this.directionMaps.put(var1, var3);
@@ -325,7 +325,7 @@ public enum EnumConnectionState {
       STATES_BY_ID[var4 - -1] = var3;
 
       for (EnumPacketDirection var6 : var3.directionMaps.keySet()) {
-        for (Class var8 : ((BiMap) var3.directionMaps.get(var6)).values()) {
+        for (Class<? extends Packet<?>> var8 : var3.directionMaps.get(var6).values()) { // BCMP
           if (STATES_BY_CLASS.containsKey(var8) && STATES_BY_CLASS.get(var8) != var3) {
             throw new Error(
                 "Packet "
diff --git a/net/minecraft/network/EnumConnectionState.java.rej b/net/minecraft/network/EnumConnectionState.java.rej
new file mode 100644
index 0000000..41d5551
--- /dev/null
+++ b/net/minecraft/network/EnumConnectionState.java.rej
@@ -0,0 +1,10 @@
+diff a/net/minecraft/network/EnumConnectionState.java b/net/minecraft/network/EnumConnectionState.java	(rejected hunks)
+@@ -330,7 +330,7 @@ public enum EnumConnectionState {
+       STATES_BY_ID[var4 - MIN_PROTOCOL_ID] = var3;
+ 
+       for (EnumPacketDirection var6 : var3.directionMaps.keySet()) {
+-        for (Class var8 : ((BiMap) var3.directionMaps.get(var6)).values()) {
++        for (Class<? extends Packet<?>> var8 : var3.directionMaps.get(var6).values()) { // BCMP
+           if (STATES_BY_CLASS.containsKey(var8) && STATES_BY_CLASS.get(var8) != var3) {
+             throw new Error(
+                 "Packet "
diff --git a/net/minecraft/network/NetworkManager.java b/net/minecraft/network/NetworkManager.java
index d43bae5..f33cd52 100644
--- a/net/minecraft/network/NetworkManager.java
+++ b/net/minecraft/network/NetworkManager.java
@@ -134,7 +134,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     this.closeChannel(var3);
   }
 
-  protected void channelRead0(ChannelHandlerContext var1, Packet<?> var2) throws Exception {
+  protected void channelRead0(ChannelHandlerContext var1, Packet var2) throws Exception { // BCMP
     if (this.channel.isOpen()) {
       try {
         var2.processPacket(this.packetListener);
diff --git a/net/minecraft/pathfinding/WalkNodeProcessor.java b/net/minecraft/pathfinding/WalkNodeProcessor.java
index e3918db..1a50732 100644
--- a/net/minecraft/pathfinding/WalkNodeProcessor.java
+++ b/net/minecraft/pathfinding/WalkNodeProcessor.java
@@ -76,7 +76,7 @@ public class WalkNodeProcessor extends NodeProcessor {
     BlockPos var9 = new BlockPos(this.entity);
     PathNodeType var10 = this.getPathNodeType(this.entity, var9.getX(), var1, var9.getZ());
     if (this.entity.getPathPriority(var10) < 0.0F) {
-      HashSet var4 = Sets.newHashSet();
+      HashSet<BlockPos> var4 = Sets.newHashSet(); // BCMP
       var4.add(
           new BlockPos(
               this.entity.getEntityBoundingBox().minX,
@@ -314,7 +314,7 @@ public class WalkNodeProcessor extends NodeProcessor {
       int var8,
       boolean var9,
       boolean var10) {
-    EnumSet var11 = EnumSet.noneOf(PathNodeType.class);
+    EnumSet<PathNodeType> var11 = EnumSet.noneOf(PathNodeType.class); // BCMP
     PathNodeType var12 = PathNodeType.BLOCKED;
     double var13 = (double) var5.width / 2.0D;
     BlockPos var15 = new BlockPos(var5);
diff --git a/net/minecraft/pathfinding/WalkNodeProcessor.java.rej b/net/minecraft/pathfinding/WalkNodeProcessor.java.rej
new file mode 100644
index 0000000..cb15f7f
--- /dev/null
+++ b/net/minecraft/pathfinding/WalkNodeProcessor.java.rej
@@ -0,0 +1,10 @@
+diff a/net/minecraft/pathfinding/WalkNodeProcessor.java b/net/minecraft/pathfinding/WalkNodeProcessor.java	(rejected hunks)
+@@ -75,7 +75,7 @@ public class WalkNodeProcessor extends NodeProcessor {
+     BlockPos var9 = new BlockPos(this.entity);
+     PathNodeType var10 = this.getPathNodeType(this.entity, var9.getX(), var1, var9.getZ());
+     if (this.entity.getPathPriority(var10) < 0.0F) {
+-      HashSet var4 = new HashSet();
++      HashSet<BlockPos> var4 = new HashSet(); // BCMP
+       var4.add(
+           new BlockPos(
+               this.entity.getEntityBoundingBox().minX,
diff --git a/net/minecraft/profiler/Snooper.java b/net/minecraft/profiler/Snooper.java
index 54646dc..825b444 100644
--- a/net/minecraft/profiler/Snooper.java
+++ b/net/minecraft/profiler/Snooper.java
@@ -88,7 +88,7 @@ public class Snooper {
 
   private void addJvmArgsToSnooper() {
     RuntimeMXBean var1 = ManagementFactory.getRuntimeMXBean();
-    List var2 = var1.getInputArguments();
+    List<String> var2 = var1.getInputArguments(); // BCMP
     int var3 = 0;
 
     for (String var5 : var2) {
diff --git a/net/minecraft/scoreboard/Scoreboard.java b/net/minecraft/scoreboard/Scoreboard.java
index 1836bbd..21b8bb7 100644
--- a/net/minecraft/scoreboard/Scoreboard.java
+++ b/net/minecraft/scoreboard/Scoreboard.java
@@ -41,7 +41,7 @@ public class Scoreboard {
             "An objective with the name \'" + var1 + "\' already exists!");
       } else {
         var3 = new ScoreObjective(this, var1, var2);
-        Object var4 = (List) this.scoreObjectiveCriterias.get(var2);
+        List<ScoreObjective> var4 = this.scoreObjectiveCriterias.get(var2); // BCMP
         if (var4 == null) {
           var4 = Lists.newArrayList();
           this.scoreObjectiveCriterias.put(var2, var4);
@@ -74,7 +74,7 @@ public class Scoreboard {
     if (var1.length() > 40) {
       throw new IllegalArgumentException("The player name \'" + var1 + "\' is too long!");
     } else {
-      Object var3 = (Map) this.entitiesScoreObjectives.get(var1);
+      Map<ScoreObjective, Score> var3 = this.entitiesScoreObjectives.get(var1); // BCMP
       if (var3 == null) {
         var3 = Maps.newHashMap();
         this.entitiesScoreObjectives.put(var1, var3);
@@ -135,10 +135,10 @@ public class Scoreboard {
   }
 
   public Collection<Score> getScores() {
-    Collection var1 = this.entitiesScoreObjectives.values();
+    Collection<Map<ScoreObjective, Score>> var1 = this.entitiesScoreObjectives.values(); // BCMP
     ArrayList var2 = Lists.newArrayList();
 
-    for (Map var4 : var1) {
+    for (Map<ScoreObjective, Score> var4 : var1) { // BCMP
       var2.addAll(var4.values());
     }
 
diff --git a/net/minecraft/scoreboard/ServerScoreboard.java b/net/minecraft/scoreboard/ServerScoreboard.java
index a67efe1..5384baf 100644
--- a/net/minecraft/scoreboard/ServerScoreboard.java
+++ b/net/minecraft/scoreboard/ServerScoreboard.java
@@ -170,7 +170,7 @@ public class ServerScoreboard extends Scoreboard {
   }
 
   public void addObjective(ScoreObjective var1) {
-    List var2 = this.getCreatePackets(var1);
+    List<Packet<?>> var2 = this.getCreatePackets(var1); // BCMP
 
     for (EntityPlayerMP var4 : this.scoreboardMCServer.getPlayerList().getPlayerList()) {
       for (Packet var6 : var2) {
@@ -195,7 +195,7 @@ public class ServerScoreboard extends Scoreboard {
   }
 
   public void sendDisplaySlotRemovalPackets(ScoreObjective var1) {
-    List var2 = this.getDestroyPackets(var1);
+    List<Packet<?>> var2 = this.getDestroyPackets(var1);
 
     for (EntityPlayerMP var4 : this.scoreboardMCServer.getPlayerList().getPlayerList()) {
       for (Packet var6 : var2) {
diff --git a/net/minecraft/server/MinecraftServer.java b/net/minecraft/server/MinecraftServer.java
index 735cb67..87209d9 100644
--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -836,7 +836,7 @@ public abstract class MinecraftServer
       return var5;
     } else {
       boolean var7 = !var2.contains(" ");
-      List var8 = this.commandManager.getTabCompletionOptions(var1, var2, var3);
+      List<String> var8 = this.commandManager.getTabCompletionOptions(var1, var2, var3); // BCMP
       if (!var8.isEmpty()) {
         for (String var10 : var8) {
           if (var7) {
diff --git a/net/minecraft/server/dedicated/DedicatedServer.java b/net/minecraft/server/dedicated/DedicatedServer.java
index 7835300..bcd6dc9 100644
--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -87,7 +87,7 @@ public class DedicatedServer extends MinecraftServer implements IServer {
         };
   }
 
-  protected boolean startServer() throws IOException {
+  public boolean startServer() throws IOException { // BCMP
     Thread var1 =
         new Thread("Server console handler") {
           public void run() {
@@ -307,7 +307,7 @@ public class DedicatedServer extends MinecraftServer implements IServer {
     return this.settings.getBooleanProperty("hardcore", false);
   }
 
-  protected void finalTick(CrashReport var1) {}
+  public void finalTick(CrashReport var1) {} // BCMP
 
   public CrashReport addServerInfoToCrashReport(CrashReport var1) {
     var1 = super.addServerInfoToCrashReport(var1);
@@ -333,7 +333,7 @@ public class DedicatedServer extends MinecraftServer implements IServer {
     return var1;
   }
 
-  protected void systemExitNow() {
+  public void systemExitNow() { // BCMP
     System.exit(0);
   }
 
diff --git a/net/minecraft/server/management/PlayerList.java b/net/minecraft/server/management/PlayerList.java
index efd6044..857e9b4 100644
--- a/net/minecraft/server/management/PlayerList.java
+++ b/net/minecraft/server/management/PlayerList.java
@@ -406,7 +406,7 @@ public abstract class PlayerList {
 
   public EntityPlayerMP createPlayerForUser(GameProfile var1) {
     UUID var2 = EntityPlayer.getUUID(var1);
-    ArrayList var3 = Lists.newArrayList();
+    ArrayList<EntityPlayerMP> var3 = Lists.newArrayList(); // BCMP
 
     for (int var4 = 0; var4 < this.playerEntityList.size(); ++var4) {
       EntityPlayerMP var5 = (EntityPlayerMP) this.playerEntityList.get(var4);
diff --git a/net/minecraft/server/management/PlayerProfileCache.java b/net/minecraft/server/management/PlayerProfileCache.java
index 52473d6..d46f6d3 100644
--- a/net/minecraft/server/management/PlayerProfileCache.java
+++ b/net/minecraft/server/management/PlayerProfileCache.java
@@ -192,7 +192,7 @@ public class PlayerProfileCache {
 
     try {
       var1 = Files.newReader(this.usercacheFile, Charsets.UTF_8);
-      List var2 = (List) this.gson.fromJson(var1, TYPE);
+      List<PlayerProfileCache.ProfileEntry> var2 = (List) this.gson.fromJson(var1, TYPE); // BCMP
       this.usernameToProfileEntryMap.clear();
       this.uuidToProfileEntryMap.clear();
       this.gameProfiles.clear();
diff --git a/net/minecraft/server/management/PreYggdrasilConverter.java b/net/minecraft/server/management/PreYggdrasilConverter.java
index c4bceff..d480b02 100644
--- a/net/minecraft/server/management/PreYggdrasilConverter.java
+++ b/net/minecraft/server/management/PreYggdrasilConverter.java
@@ -49,7 +49,7 @@ public class PreYggdrasilConverter {
   public static final File OLD_WHITELIST_FILE = new File("white-list.txt");
 
   static List<String> readFile(File var0, Map<String, String[]> var1) throws IOException {
-    List var2 = Files.readLines(var0, Charsets.UTF_8);
+    List<String> var2 = Files.readLines(var0, Charsets.UTF_8); // BCMP
 
     for (String var4 : var2) {
       var4 = var4.trim();
@@ -167,7 +167,7 @@ public class PreYggdrasilConverter {
       }
 
       try {
-        HashMap var2 = Maps.newHashMap();
+        HashMap<String, String[]> var2 = Maps.newHashMap(); // BCMP
         readFile(OLD_IPBAN_FILE, var2);
 
         for (String var4 : var2.keySet()) {
diff --git a/net/minecraft/server/management/UserList.java b/net/minecraft/server/management/UserList.java
index c6aca35..7ca6695 100644
--- a/net/minecraft/server/management/UserList.java
+++ b/net/minecraft/server/management/UserList.java
@@ -146,7 +146,7 @@ public class UserList<K, V extends UserListEntry<K>> {
   }
 
   public void readSavedFile() throws FileNotFoundException {
-    Collection var1 = null;
+    Collection<V> var1 = null; // BCMP
     BufferedReader var2 = null;
 
     try {
@@ -159,7 +159,7 @@ public class UserList<K, V extends UserListEntry<K>> {
     if (var1 != null) {
       this.values.clear();
 
-      for (UserListEntry var4 : var1) {
+      for (V var4 : var1) { // BCMP
         if (var4.getValue() != null) {
           this.values.put(this.getObjectKey(var4.getValue()), var4);
         }
diff --git a/net/minecraft/stats/StatList.java b/net/minecraft/stats/StatList.java
index 7d50b3b..c506132 100644
--- a/net/minecraft/stats/StatList.java
+++ b/net/minecraft/stats/StatList.java
@@ -354,7 +354,7 @@ public class StatList {
   }
 
   private static void initCraftableStats() {
-    HashSet var0 = Sets.newHashSet();
+    HashSet<Item> var0 = Sets.newHashSet(); // BCMP
 
     for (IRecipe var2 : CraftingManager.getInstance().getRecipeList()) {
       if (var2.getRecipeOutput() != null) {
diff --git a/net/minecraft/tileentity/TileEntityBeacon.java b/net/minecraft/tileentity/TileEntityBeacon.java
index b54ae18..adc7d46 100644
--- a/net/minecraft/tileentity/TileEntityBeacon.java
+++ b/net/minecraft/tileentity/TileEntityBeacon.java
@@ -88,7 +88,7 @@ public class TileEntityBeacon extends TileEntityLockable implements ITickable, I
                   (double) (var7 + 1)))
               .expandXyz(var1)
               .addCoord(0.0D, (double) this.worldObj.getHeight(), 0.0D);
-      List var9 = this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, var8);
+      List<EntityPlayer> var9 = this.worldObj.getEntitiesWithinAABB(EntityPlayer.class, var8); // BCMP
 
       for (EntityPlayer var11 : var9) {
         var11.addPotionEffect(new PotionEffect(this.primaryEffect, var4, var3, true, true));
diff --git a/net/minecraft/util/ClassInheritanceMultiMap.java b/net/minecraft/util/ClassInheritanceMultiMap.java
index 5c70b02..d949952 100644
--- a/net/minecraft/util/ClassInheritanceMultiMap.java
+++ b/net/minecraft/util/ClassInheritanceMultiMap.java
@@ -30,7 +30,7 @@ public class ClassInheritanceMultiMap<T> extends AbstractSet<T> {
   protected void createLookup(Class<?> var1) {
     ALL_KNOWN.add(var1);
 
-    for (Object var3 : this.values) {
+    for (T var3 : this.values) { // BCMP
       if (var1.isAssignableFrom(var3.getClass())) {
         this.addForClass(var3, var1);
       }
@@ -64,7 +64,7 @@ public class ClassInheritanceMultiMap<T> extends AbstractSet<T> {
   private void addForClass(T var1, Class<?> var2) {
     List var3 = (List) this.map.get(var2);
     if (var3 == null) {
-      this.map.put(var2, Lists.newArrayList(new Object[] {var1}));
+      this.map.put(var2, Lists.newArrayList((T[]) new Object[] {var1})); // BCMP
     } else {
       var3.add(var1);
     }
diff --git a/net/minecraft/util/IObjectIntIterable.java b/net/minecraft/util/IObjectIntIterable.java
index 94354d8..e14a0c8 100644
--- a/net/minecraft/util/IObjectIntIterable.java
+++ b/net/minecraft/util/IObjectIntIterable.java
@@ -1,3 +1,3 @@
 package net.minecraft.util;
 
-public interface IObjectIntIterable extends Iterable {}
+public interface IObjectIntIterable<V> extends Iterable<V> {} // BCMP
diff --git a/net/minecraft/util/IntHashMap.java b/net/minecraft/util/IntHashMap.java
index 46fee47..9b77225 100644
--- a/net/minecraft/util/IntHashMap.java
+++ b/net/minecraft/util/IntHashMap.java
@@ -21,7 +21,7 @@ public class IntHashMap<V> {
   public V lookup(int var1) {
     int var2 = computeHash(var1);
 
-    for (IntHashMap.Entry var3 = this.slots[getSlotIndex(var2, this.slots.length)];
+    for (IntHashMap.Entry<V> var3 = this.slots[getSlotIndex(var2, this.slots.length)]; // BCMP
         var3 != null;
         var3 = var3.nextEntry) {
       if (var3.hashEntry == var1) {
diff --git a/net/minecraft/util/IntIdentityHashBiMap.java b/net/minecraft/util/IntIdentityHashBiMap.java
index 3a696b4..b953618 100644
--- a/net/minecraft/util/IntIdentityHashBiMap.java
+++ b/net/minecraft/util/IntIdentityHashBiMap.java
@@ -17,9 +17,9 @@ public class IntIdentityHashBiMap<K> implements IObjectIntIterable<K>, Iterable<
 
   public IntIdentityHashBiMap(int var1) {
     var1 = (int) ((float) var1 / 0.8F);
-    this.values = (Object[]) (new Object[var1]);
+    this.values = (K[]) new Object[var1]; // BCMP
     this.intKeys = new int[var1];
-    this.byId = (Object[]) (new Object[var1]);
+    this.byId = (K[]) new Object[var1]; // BCMP
   }
 
   public int getId(K var1) {
@@ -50,11 +50,11 @@ public class IntIdentityHashBiMap<K> implements IObjectIntIterable<K>, Iterable<
   }
 
   private void grow(int var1) {
-    Object[] var2 = this.values;
+    K[] var2 = this.values; // BCMP
     int[] var3 = this.intKeys;
-    this.values = (Object[]) (new Object[var1]);
+    this.values = (K[]) new Object[var1]; // BCMP
     this.intKeys = new int[var1];
-    this.byId = (Object[]) (new Object[var1]);
+    this.byId = (K[]) new Object[var1]; // BCMP
     this.nextFreeIndex = 0;
     this.mapSize = 0;
 
diff --git a/net/minecraft/util/LowerStringMap.java b/net/minecraft/util/LowerStringMap.java
index 6e1191d..7d5fe55 100644
--- a/net/minecraft/util/LowerStringMap.java
+++ b/net/minecraft/util/LowerStringMap.java
@@ -39,7 +39,7 @@ public class LowerStringMap<V> implements Map<String, V> {
 
   public void putAll(Map<? extends String, ? extends V> var1) {
     for (Entry var3 : var1.entrySet()) {
-      this.put((String) var3.getKey(), var3.getValue());
+      this.put((String) var3.getKey(), ((Entry<String, V>)var3).getValue()); // BCMP
     }
   }
 
diff --git a/net/minecraft/util/MapPopulator.java b/net/minecraft/util/MapPopulator.java
index a057351..a288c4b 100644
--- a/net/minecraft/util/MapPopulator.java
+++ b/net/minecraft/util/MapPopulator.java
@@ -11,9 +11,9 @@ public class MapPopulator {
   }
 
   public static <K, V> Map<K, V> populateMap(Iterable<K> var0, Iterable<V> var1, Map<K, V> var2) {
-    Iterator var3 = var1.iterator();
+    Iterator<V> var3 = var1.iterator(); // BCMP
 
-    for (Object var5 : var0) {
+    for (K var5 : var0) { // BCMP
       var2.put(var5, var3.next());
     }
 
diff --git a/net/minecraft/util/ObjectIntIdentityMap.java b/net/minecraft/util/ObjectIntIdentityMap.java
index 7b6f346..5b63280 100644
--- a/net/minecraft/util/ObjectIntIdentityMap.java
+++ b/net/minecraft/util/ObjectIntIdentityMap.java
@@ -26,7 +26,7 @@ public class ObjectIntIdentityMap<T> implements IObjectIntIterable<T> {
     this.identityMap.put(var1, Integer.valueOf(var2));
 
     while (this.objectList.size() <= var2) {
-      this.objectList.add((Object) null);
+      this.objectList.add(null); // BCMP
     }
 
     this.objectList.set(var2, var1);
diff --git a/net/minecraft/util/datafix/DataFixer.java b/net/minecraft/util/datafix/DataFixer.java
index dd23ab2..f942dbc 100644
--- a/net/minecraft/util/datafix/DataFixer.java
+++ b/net/minecraft/util/datafix/DataFixer.java
@@ -93,7 +93,7 @@ public class DataFixer implements IDataFixer {
   }
 
   private <V> List<V> getTypeList(Map<IFixType, List<V>> var1, IFixType var2) {
-    Object var3 = (List) var1.get(var2);
+    List<V> var3 = (List) var1.get(var2); // BCMP
     if (var3 == null) {
       var3 = Lists.newArrayList();
       var1.put(var2, var3);
diff --git a/net/minecraft/util/math/Cartesian.java b/net/minecraft/util/math/Cartesian.java
index 93855fe..e6e5849 100644
--- a/net/minecraft/util/math/Cartesian.java
+++ b/net/minecraft/util/math/Cartesian.java
@@ -46,7 +46,7 @@ public class Cartesian {
     private GetList() {}
 
     public List<T> apply(@Nullable Object[] var1) {
-      return Arrays.asList((Object[]) var1);
+      return Arrays.asList((T[]) var1); // BCMP
     }
   }
 
diff --git a/net/minecraft/world/World.java b/net/minecraft/world/World.java
index 52e23da..933cb1d 100644
--- a/net/minecraft/world/World.java
+++ b/net/minecraft/world/World.java
@@ -2133,7 +2133,7 @@ public abstract class World implements IBlockAccess {
     ArrayList var3 = Lists.newArrayList();
 
     for (Entity var5 : this.loadedEntityList) {
-      if (var1.isAssignableFrom(var5.getClass()) && var2.apply(var5)) {
+      if (var1.isAssignableFrom(var5.getClass()) && var2.apply((T) var5)) { // BCMP
         var3.add(var5);
       }
     }
@@ -2145,7 +2145,7 @@ public abstract class World implements IBlockAccess {
     ArrayList var3 = Lists.newArrayList();
 
     for (Entity var5 : this.playerEntities) {
-      if (var1.isAssignableFrom(var5.getClass()) && var2.apply(var5)) {
+      if (var1.isAssignableFrom(var5.getClass()) && var2.apply((T) var5)) { // BCMP
         var3.add(var5);
       }
     }
diff --git a/net/minecraft/world/chunk/Chunk.java b/net/minecraft/world/chunk/Chunk.java
index 863c29f..a25e733 100644
--- a/net/minecraft/world/chunk/Chunk.java
+++ b/net/minecraft/world/chunk/Chunk.java
@@ -729,8 +729,8 @@ public class Chunk {
     for (int var7 = var5; var7 <= var6; ++var7) {
       for (Entity var9 : this.entityLists[var7].getByClass(var1)) {
         if (var9.getEntityBoundingBox().intersectsWith(var2)
-            && (var4 == null || var4.apply(var9))) {
-          var3.add(var9);
+            && (var4 == null || var4.apply((T) var9))) { // BCMP
+          var3.add((T) var9); // BCMP
         }
       }
     }
diff --git a/net/minecraft/world/chunk/storage/AnvilChunkLoader.java b/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
index 3440ca4..3a733e3 100644
--- a/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
+++ b/net/minecraft/world/chunk/storage/AnvilChunkLoader.java
@@ -278,7 +278,7 @@ public class AnvilChunkLoader implements IChunkLoader, IThreadedFileIO {
     }
 
     var3.setTag("TileEntities", var19);
-    List var22 = var2.getPendingBlockUpdates(var1, false);
+    List<NextTickListEntry> var22 = var2.getPendingBlockUpdates(var1, false); // BCMP
     if (var22 != null) {
       long var25 = var2.getTotalWorldTime();
       NBTTagList var28 = new NBTTagList();
diff --git a/net/minecraft/world/end/DragonFightManager.java b/net/minecraft/world/end/DragonFightManager.java
index 66c129b..97c0f8b 100644
--- a/net/minecraft/world/end/DragonFightManager.java
+++ b/net/minecraft/world/end/DragonFightManager.java
@@ -330,7 +330,7 @@ public class DragonFightManager {
       var1.add(var3);
     }
 
-    HashSet var5 = Sets.newHashSet(this.bossInfo.getPlayers());
+    HashSet<EntityPlayerMP> var5 = Sets.newHashSet(this.bossInfo.getPlayers()); // BCMP
     var5.removeAll(var1);
 
     for (EntityPlayerMP var4 : var5) {
diff --git a/net/minecraft/world/gen/FlatGeneratorInfo.java b/net/minecraft/world/gen/FlatGeneratorInfo.java
index 2ec7fc0..73a8d9a 100644
--- a/net/minecraft/world/gen/FlatGeneratorInfo.java
+++ b/net/minecraft/world/gen/FlatGeneratorInfo.java
@@ -71,7 +71,7 @@ public class FlatGeneratorInfo {
         }
 
         var1.append(((String) var4.getKey()).toLowerCase());
-        Map var5 = (Map) var4.getValue();
+        Map<String, String> var5 = (Map) var4.getValue(); // BCMP
         if (!var5.isEmpty()) {
           var1.append("(");
           int var6 = 0;
diff --git a/net/minecraft/world/gen/layer/GenLayer.java b/net/minecraft/world/gen/layer/GenLayer.java
index 83ef36d..9c092a8 100644
--- a/net/minecraft/world/gen/layer/GenLayer.java
+++ b/net/minecraft/world/gen/layer/GenLayer.java
@@ -68,7 +68,7 @@ public abstract class GenLayer {
     GenLayer var36 = GenLayerZoom.magnify(1000L, var9, 2);
     GenLayerBiomeEdge var37 = new GenLayerBiomeEdge(1000L, var36);
     GenLayer var10 = GenLayerZoom.magnify(1000L, var31, 2);
-    GenLayerHills var38 = new GenLayerHills(1000L, var37, var10);
+    GenLayer var38 = new GenLayerHills(1000L, var37, var10); // BCMP
     GenLayer var32 = GenLayerZoom.magnify(1000L, var31, 2);
     var32 = GenLayerZoom.magnify(1000L, var32, var7);
     GenLayerRiver var34 = new GenLayerRiver(1L, var32);
diff --git a/net/minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java b/net/minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java
index 36437bc..9cea7b5 100644
--- a/net/minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java
+++ b/net/minecraft/world/gen/structure/ComponentScatteredFeaturePieces.java
@@ -1144,7 +1144,7 @@ public class ComponentScatteredFeaturePieces {
                   var10.calculateConnectedPos(
                       var9, new BlockPos(3, -1 - var13 * 3, 5), var9, new BlockPos(3, 5, 7)));
           var12.addBlocksToWorldChunk(var1, var21, var9);
-          Map var22 = var12.getDataBlocks(var21, var9);
+          Map<?, ?> var22 = var12.getDataBlocks(var21, var9); // BCMP
 
           for (Entry var17 : var22.entrySet()) {
             if ("chest".equals(var17.getValue())) {
diff --git a/net/minecraft/world/gen/structure/MapGenStructure.java b/net/minecraft/world/gen/structure/MapGenStructure.java
index 7099475..1e9b968 100644
--- a/net/minecraft/world/gen/structure/MapGenStructure.java
+++ b/net/minecraft/world/gen/structure/MapGenStructure.java
@@ -168,7 +168,7 @@ public abstract class MapGenStructure extends MapGenBase {
     if (var13 != null) {
       return var13;
     } else {
-      List var20 = this.getCoordList();
+      List<BlockPos> var20 = this.getCoordList(); // BCMP
       if (var20 != null) {
         BlockPos var21 = null;
 
diff --git a/net/minecraft/world/gen/structure/StructureComponentTemplate.java b/net/minecraft/world/gen/structure/StructureComponentTemplate.java
index 3290074..30adc20 100644
--- a/net/minecraft/world/gen/structure/StructureComponentTemplate.java
+++ b/net/minecraft/world/gen/structure/StructureComponentTemplate.java
@@ -52,7 +52,7 @@ public abstract class StructureComponentTemplate extends StructureComponent {
   public boolean addComponentParts(World var1, Random var2, StructureBoundingBox var3) {
     this.placeSettings.setBoundingBox(var3);
     this.template.addBlocksToWorld(var1, this.templatePosition, this.placeSettings);
-    Map var4 = this.template.getDataBlocks(this.templatePosition, this.placeSettings);
+    Map<BlockPos, String> var4 = this.template.getDataBlocks(this.templatePosition, this.placeSettings); // BCMP
 
     for (BlockPos var6 : var4.keySet()) {
       String var7 = (String) var4.get(var6);
diff --git a/net/minecraft/world/gen/structure/StructureEndCityPieces.java b/net/minecraft/world/gen/structure/StructureEndCityPieces.java
index 10ddb4f..c176ef8 100644
--- a/net/minecraft/world/gen/structure/StructureEndCityPieces.java
+++ b/net/minecraft/world/gen/structure/StructureEndCityPieces.java
@@ -399,7 +399,7 @@ public class StructureEndCityPieces {
     if (var1 > 8) {
       return false;
     } else {
-      ArrayList var6 = Lists.newArrayList();
+      ArrayList<StructureComponent> var6 = Lists.newArrayList(); // BCMP
       if (var0.generate(var1, var2, var3, var6, var5)) {
         boolean var7 = false;
         int var8 = var5.nextInt();
diff --git a/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java b/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
index 6bbde9c..ce0c5ad 100644
--- a/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
+++ b/net/minecraft/world/gen/structure/StructureOceanMonumentPieces.java
@@ -902,7 +902,7 @@ public class StructureOceanMonumentPieces {
             new StructureBoundingBox(var2, 39, var3, var2 + 58 - 1, 61, var3 + 58 - 1);
       }
 
-      List var6 = this.generateRoomGraph(var1);
+      List<RoomDefinition> var6 = this.generateRoomGraph(var1); // BCMP
       this.sourceRoom.claimed = true;
       this.childPieces.add(new StructureOceanMonumentPieces.EntryRoom(var5, this.sourceRoom));
       this.childPieces.add(
@@ -1062,7 +1062,7 @@ public class StructureOceanMonumentPieces {
                   EnumFacing.UP.getIndex()]
               .claimed =
           true;
-      ArrayList var30 = Lists.newArrayList();
+      ArrayList<RoomDefinition> var30 = Lists.newArrayList(); // BCMP
 
       for (StructureOceanMonumentPieces.RoomDefinition var37 : var2) {
         if (var37 != null) {
diff --git a/net/minecraft/world/gen/structure/template/Template.java b/net/minecraft/world/gen/structure/template/Template.java
index 3666a2a..dc5856a 100644
--- a/net/minecraft/world/gen/structure/template/Template.java
+++ b/net/minecraft/world/gen/structure/template/Template.java
@@ -106,7 +106,7 @@ public class Template {
   }
 
   private void takeEntitiesFromWorld(World var1, BlockPos var2, BlockPos var3) {
-    List var4 =
+    List<Entity> var4 = // BCMP
         var1.getEntitiesWithinAABB(
             Entity.class,
             new AxisAlignedBB(var2, var3),
diff --git a/net/minecraft/world/storage/loot/LootPool.java b/net/minecraft/world/storage/loot/LootPool.java
index 214c5a0..5d6d751 100644
--- a/net/minecraft/world/storage/loot/LootPool.java
+++ b/net/minecraft/world/storage/loot/LootPool.java
@@ -37,7 +37,7 @@ public class LootPool {
   }
 
   protected void createLootRoll(Collection<ItemStack> var1, Random var2, LootContext var3) {
-    ArrayList var4 = Lists.newArrayList();
+    ArrayList<LootEntry> var4 = Lists.newArrayList(); // BCMP
     int var5 = 0;
 
     for (LootEntry var9 : this.lootEntries) {
diff --git a/net/minecraft/world/storage/loot/LootTable.java b/net/minecraft/world/storage/loot/LootTable.java
index 57f1432..7860f24 100644
--- a/net/minecraft/world/storage/loot/LootTable.java
+++ b/net/minecraft/world/storage/loot/LootTable.java
@@ -48,7 +48,7 @@ public class LootTable {
   }
 
   public void fillInventory(IInventory var1, Random var2, LootContext var3) {
-    List var4 = this.generateLootForPools(var2, var3);
+    List<ItemStack> var4 = this.generateLootForPools(var2, var3); // BCMP
     List var5 = this.getEmptySlotsRandomized(var1, var2);
     this.shuffleItems(var4, var5.size(), var2);
 
diff --git a/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java b/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
index a22b088..26fddc6 100644
--- a/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
+++ b/net/minecraft/world/storage/loot/conditions/EntityHasProperty.java
@@ -57,7 +57,7 @@ public class EntityHasProperty implements LootCondition {
     }
 
     public EntityHasProperty deserialize(JsonObject var1, JsonDeserializationContext var2) {
-      Set var3 = JsonUtils.getJsonObject(var1, "properties").entrySet();
+      Set<Entry<String, JsonElement>> var3 = JsonUtils.getJsonObject(var1, "properties").entrySet(); // BCMP
       EntityProperty[] var4 = new EntityProperty[var3.size()];
       int var5 = 0;
 
diff --git a/net/minecraft/world/storage/loot/conditions/EntityHasScore.java b/net/minecraft/world/storage/loot/conditions/EntityHasScore.java
index 4fa4ead..b161b2b 100644
--- a/net/minecraft/world/storage/loot/conditions/EntityHasScore.java
+++ b/net/minecraft/world/storage/loot/conditions/EntityHasScore.java
@@ -78,7 +78,7 @@ public class EntityHasScore implements LootCondition {
     }
 
     public EntityHasScore deserialize(JsonObject var1, JsonDeserializationContext var2) {
-      Set var3 = JsonUtils.getJsonObject(var1, "scores").entrySet();
+      Set<Entry<String, JsonElement>> var3 = JsonUtils.getJsonObject(var1, "scores").entrySet(); // BCMP
       LinkedHashMap var4 = Maps.newLinkedHashMap();
 
       for (Entry var6 : var3) {
-- 
2.11.0.windows.1

